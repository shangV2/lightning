/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lighting.rpc.webmetaserver.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class WMSCrawlerWebsite implements org.apache.thrift.TBase<WMSCrawlerWebsite, WMSCrawlerWebsite._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WMSCrawlerWebsite");

  private static final org.apache.thrift.protocol.TField WEBSITE_FIELD_DESC = new org.apache.thrift.protocol.TField("website", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField WEBSITE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("websiteType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CRAWLER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("crawlerType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField URL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("urlType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField URL_RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("urlRule", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CONTENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("contentType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CONTENT_RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("contentRule", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SEEDS_FIELD_DESC = new org.apache.thrift.protocol.TField("seeds", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField CRAWLER_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("crawlerNum", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField CRAWLER_SCHEDULE_FIELD_DESC = new org.apache.thrift.protocol.TField("crawlerSchedule", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField WEBID_FIELD_DESC = new org.apache.thrift.protocol.TField("webid", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WMSCrawlerWebsiteStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WMSCrawlerWebsiteTupleSchemeFactory());
  }

  public String website; // required
  /**
   * 
   * @see WMSWebsiteType
   */
  public WMSWebsiteType websiteType; // required
  /**
   * 
   * @see WMSWebsiteCrawlerType
   */
  public WMSWebsiteCrawlerType crawlerType; // required
  /**
   * 
   * @see WMSWebsiteUrlRuleType
   */
  public WMSWebsiteUrlRuleType urlType; // required
  public String urlRule; // required
  /**
   * 
   * @see WMSWebsiteContentRuleType
   */
  public WMSWebsiteContentRuleType contentType; // required
  public String contentRule; // required
  public List<String> seeds; // required
  public int crawlerNum; // required
  public int crawlerSchedule; // optional
  public int webid; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WEBSITE((short)1, "website"),
    /**
     * 
     * @see WMSWebsiteType
     */
    WEBSITE_TYPE((short)2, "websiteType"),
    /**
     * 
     * @see WMSWebsiteCrawlerType
     */
    CRAWLER_TYPE((short)3, "crawlerType"),
    /**
     * 
     * @see WMSWebsiteUrlRuleType
     */
    URL_TYPE((short)4, "urlType"),
    URL_RULE((short)5, "urlRule"),
    /**
     * 
     * @see WMSWebsiteContentRuleType
     */
    CONTENT_TYPE((short)6, "contentType"),
    CONTENT_RULE((short)7, "contentRule"),
    SEEDS((short)8, "seeds"),
    CRAWLER_NUM((short)9, "crawlerNum"),
    CRAWLER_SCHEDULE((short)10, "crawlerSchedule"),
    WEBID((short)11, "webid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WEBSITE
          return WEBSITE;
        case 2: // WEBSITE_TYPE
          return WEBSITE_TYPE;
        case 3: // CRAWLER_TYPE
          return CRAWLER_TYPE;
        case 4: // URL_TYPE
          return URL_TYPE;
        case 5: // URL_RULE
          return URL_RULE;
        case 6: // CONTENT_TYPE
          return CONTENT_TYPE;
        case 7: // CONTENT_RULE
          return CONTENT_RULE;
        case 8: // SEEDS
          return SEEDS;
        case 9: // CRAWLER_NUM
          return CRAWLER_NUM;
        case 10: // CRAWLER_SCHEDULE
          return CRAWLER_SCHEDULE;
        case 11: // WEBID
          return WEBID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CRAWLERNUM_ISSET_ID = 0;
  private static final int __CRAWLERSCHEDULE_ISSET_ID = 1;
  private static final int __WEBID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CRAWLER_SCHEDULE,_Fields.WEBID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WEBSITE, new org.apache.thrift.meta_data.FieldMetaData("website", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WEBSITE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("websiteType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, WMSWebsiteType.class)));
    tmpMap.put(_Fields.CRAWLER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("crawlerType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, WMSWebsiteCrawlerType.class)));
    tmpMap.put(_Fields.URL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("urlType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, WMSWebsiteUrlRuleType.class)));
    tmpMap.put(_Fields.URL_RULE, new org.apache.thrift.meta_data.FieldMetaData("urlRule", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("contentType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, WMSWebsiteContentRuleType.class)));
    tmpMap.put(_Fields.CONTENT_RULE, new org.apache.thrift.meta_data.FieldMetaData("contentRule", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEEDS, new org.apache.thrift.meta_data.FieldMetaData("seeds", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CRAWLER_NUM, new org.apache.thrift.meta_data.FieldMetaData("crawlerNum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CRAWLER_SCHEDULE, new org.apache.thrift.meta_data.FieldMetaData("crawlerSchedule", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WEBID, new org.apache.thrift.meta_data.FieldMetaData("webid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WMSCrawlerWebsite.class, metaDataMap);
  }

  public WMSCrawlerWebsite() {
    this.websiteType = com.lighting.rpc.webmetaserver.model.WMSWebsiteType.WMS_WEBSITE_ZH_CN;

    this.crawlerType = com.lighting.rpc.webmetaserver.model.WMSWebsiteCrawlerType.WMS_WEBSITE_CRAWLER_STAND_ALONE;

    this.urlType = com.lighting.rpc.webmetaserver.model.WMSWebsiteUrlRuleType.WMS_WEBSITE_URL_RULE_HIT;

    this.contentType = com.lighting.rpc.webmetaserver.model.WMSWebsiteContentRuleType.WMS_WEBSITE_CONTENT_RULE_TEMPLATE_HPATH;

  }

  public WMSCrawlerWebsite(
    String website,
    WMSWebsiteType websiteType,
    WMSWebsiteCrawlerType crawlerType,
    WMSWebsiteUrlRuleType urlType,
    String urlRule,
    WMSWebsiteContentRuleType contentType,
    String contentRule,
    List<String> seeds,
    int crawlerNum)
  {
    this();
    this.website = website;
    this.websiteType = websiteType;
    this.crawlerType = crawlerType;
    this.urlType = urlType;
    this.urlRule = urlRule;
    this.contentType = contentType;
    this.contentRule = contentRule;
    this.seeds = seeds;
    this.crawlerNum = crawlerNum;
    setCrawlerNumIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WMSCrawlerWebsite(WMSCrawlerWebsite other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetWebsite()) {
      this.website = other.website;
    }
    if (other.isSetWebsiteType()) {
      this.websiteType = other.websiteType;
    }
    if (other.isSetCrawlerType()) {
      this.crawlerType = other.crawlerType;
    }
    if (other.isSetUrlType()) {
      this.urlType = other.urlType;
    }
    if (other.isSetUrlRule()) {
      this.urlRule = other.urlRule;
    }
    if (other.isSetContentType()) {
      this.contentType = other.contentType;
    }
    if (other.isSetContentRule()) {
      this.contentRule = other.contentRule;
    }
    if (other.isSetSeeds()) {
      List<String> __this__seeds = new ArrayList<String>();
      for (String other_element : other.seeds) {
        __this__seeds.add(other_element);
      }
      this.seeds = __this__seeds;
    }
    this.crawlerNum = other.crawlerNum;
    this.crawlerSchedule = other.crawlerSchedule;
    this.webid = other.webid;
  }

  public WMSCrawlerWebsite deepCopy() {
    return new WMSCrawlerWebsite(this);
  }

  @Override
  public void clear() {
    this.website = null;
    this.websiteType = com.lighting.rpc.webmetaserver.model.WMSWebsiteType.WMS_WEBSITE_ZH_CN;

    this.crawlerType = com.lighting.rpc.webmetaserver.model.WMSWebsiteCrawlerType.WMS_WEBSITE_CRAWLER_STAND_ALONE;

    this.urlType = com.lighting.rpc.webmetaserver.model.WMSWebsiteUrlRuleType.WMS_WEBSITE_URL_RULE_HIT;

    this.urlRule = null;
    this.contentType = com.lighting.rpc.webmetaserver.model.WMSWebsiteContentRuleType.WMS_WEBSITE_CONTENT_RULE_TEMPLATE_HPATH;

    this.contentRule = null;
    this.seeds = null;
    setCrawlerNumIsSet(false);
    this.crawlerNum = 0;
    setCrawlerScheduleIsSet(false);
    this.crawlerSchedule = 0;
    setWebidIsSet(false);
    this.webid = 0;
  }

  public String getWebsite() {
    return this.website;
  }

  public WMSCrawlerWebsite setWebsite(String website) {
    this.website = website;
    return this;
  }

  public void unsetWebsite() {
    this.website = null;
  }

  /** Returns true if field website is set (has been assigned a value) and false otherwise */
  public boolean isSetWebsite() {
    return this.website != null;
  }

  public void setWebsiteIsSet(boolean value) {
    if (!value) {
      this.website = null;
    }
  }

  /**
   * 
   * @see WMSWebsiteType
   */
  public WMSWebsiteType getWebsiteType() {
    return this.websiteType;
  }

  /**
   * 
   * @see WMSWebsiteType
   */
  public WMSCrawlerWebsite setWebsiteType(WMSWebsiteType websiteType) {
    this.websiteType = websiteType;
    return this;
  }

  public void unsetWebsiteType() {
    this.websiteType = null;
  }

  /** Returns true if field websiteType is set (has been assigned a value) and false otherwise */
  public boolean isSetWebsiteType() {
    return this.websiteType != null;
  }

  public void setWebsiteTypeIsSet(boolean value) {
    if (!value) {
      this.websiteType = null;
    }
  }

  /**
   * 
   * @see WMSWebsiteCrawlerType
   */
  public WMSWebsiteCrawlerType getCrawlerType() {
    return this.crawlerType;
  }

  /**
   * 
   * @see WMSWebsiteCrawlerType
   */
  public WMSCrawlerWebsite setCrawlerType(WMSWebsiteCrawlerType crawlerType) {
    this.crawlerType = crawlerType;
    return this;
  }

  public void unsetCrawlerType() {
    this.crawlerType = null;
  }

  /** Returns true if field crawlerType is set (has been assigned a value) and false otherwise */
  public boolean isSetCrawlerType() {
    return this.crawlerType != null;
  }

  public void setCrawlerTypeIsSet(boolean value) {
    if (!value) {
      this.crawlerType = null;
    }
  }

  /**
   * 
   * @see WMSWebsiteUrlRuleType
   */
  public WMSWebsiteUrlRuleType getUrlType() {
    return this.urlType;
  }

  /**
   * 
   * @see WMSWebsiteUrlRuleType
   */
  public WMSCrawlerWebsite setUrlType(WMSWebsiteUrlRuleType urlType) {
    this.urlType = urlType;
    return this;
  }

  public void unsetUrlType() {
    this.urlType = null;
  }

  /** Returns true if field urlType is set (has been assigned a value) and false otherwise */
  public boolean isSetUrlType() {
    return this.urlType != null;
  }

  public void setUrlTypeIsSet(boolean value) {
    if (!value) {
      this.urlType = null;
    }
  }

  public String getUrlRule() {
    return this.urlRule;
  }

  public WMSCrawlerWebsite setUrlRule(String urlRule) {
    this.urlRule = urlRule;
    return this;
  }

  public void unsetUrlRule() {
    this.urlRule = null;
  }

  /** Returns true if field urlRule is set (has been assigned a value) and false otherwise */
  public boolean isSetUrlRule() {
    return this.urlRule != null;
  }

  public void setUrlRuleIsSet(boolean value) {
    if (!value) {
      this.urlRule = null;
    }
  }

  /**
   * 
   * @see WMSWebsiteContentRuleType
   */
  public WMSWebsiteContentRuleType getContentType() {
    return this.contentType;
  }

  /**
   * 
   * @see WMSWebsiteContentRuleType
   */
  public WMSCrawlerWebsite setContentType(WMSWebsiteContentRuleType contentType) {
    this.contentType = contentType;
    return this;
  }

  public void unsetContentType() {
    this.contentType = null;
  }

  /** Returns true if field contentType is set (has been assigned a value) and false otherwise */
  public boolean isSetContentType() {
    return this.contentType != null;
  }

  public void setContentTypeIsSet(boolean value) {
    if (!value) {
      this.contentType = null;
    }
  }

  public String getContentRule() {
    return this.contentRule;
  }

  public WMSCrawlerWebsite setContentRule(String contentRule) {
    this.contentRule = contentRule;
    return this;
  }

  public void unsetContentRule() {
    this.contentRule = null;
  }

  /** Returns true if field contentRule is set (has been assigned a value) and false otherwise */
  public boolean isSetContentRule() {
    return this.contentRule != null;
  }

  public void setContentRuleIsSet(boolean value) {
    if (!value) {
      this.contentRule = null;
    }
  }

  public int getSeedsSize() {
    return (this.seeds == null) ? 0 : this.seeds.size();
  }

  public java.util.Iterator<String> getSeedsIterator() {
    return (this.seeds == null) ? null : this.seeds.iterator();
  }

  public void addToSeeds(String elem) {
    if (this.seeds == null) {
      this.seeds = new ArrayList<String>();
    }
    this.seeds.add(elem);
  }

  public List<String> getSeeds() {
    return this.seeds;
  }

  public WMSCrawlerWebsite setSeeds(List<String> seeds) {
    this.seeds = seeds;
    return this;
  }

  public void unsetSeeds() {
    this.seeds = null;
  }

  /** Returns true if field seeds is set (has been assigned a value) and false otherwise */
  public boolean isSetSeeds() {
    return this.seeds != null;
  }

  public void setSeedsIsSet(boolean value) {
    if (!value) {
      this.seeds = null;
    }
  }

  public int getCrawlerNum() {
    return this.crawlerNum;
  }

  public WMSCrawlerWebsite setCrawlerNum(int crawlerNum) {
    this.crawlerNum = crawlerNum;
    setCrawlerNumIsSet(true);
    return this;
  }

  public void unsetCrawlerNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CRAWLERNUM_ISSET_ID);
  }

  /** Returns true if field crawlerNum is set (has been assigned a value) and false otherwise */
  public boolean isSetCrawlerNum() {
    return EncodingUtils.testBit(__isset_bitfield, __CRAWLERNUM_ISSET_ID);
  }

  public void setCrawlerNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CRAWLERNUM_ISSET_ID, value);
  }

  public int getCrawlerSchedule() {
    return this.crawlerSchedule;
  }

  public WMSCrawlerWebsite setCrawlerSchedule(int crawlerSchedule) {
    this.crawlerSchedule = crawlerSchedule;
    setCrawlerScheduleIsSet(true);
    return this;
  }

  public void unsetCrawlerSchedule() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CRAWLERSCHEDULE_ISSET_ID);
  }

  /** Returns true if field crawlerSchedule is set (has been assigned a value) and false otherwise */
  public boolean isSetCrawlerSchedule() {
    return EncodingUtils.testBit(__isset_bitfield, __CRAWLERSCHEDULE_ISSET_ID);
  }

  public void setCrawlerScheduleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CRAWLERSCHEDULE_ISSET_ID, value);
  }

  public int getWebid() {
    return this.webid;
  }

  public WMSCrawlerWebsite setWebid(int webid) {
    this.webid = webid;
    setWebidIsSet(true);
    return this;
  }

  public void unsetWebid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEBID_ISSET_ID);
  }

  /** Returns true if field webid is set (has been assigned a value) and false otherwise */
  public boolean isSetWebid() {
    return EncodingUtils.testBit(__isset_bitfield, __WEBID_ISSET_ID);
  }

  public void setWebidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEBID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case WEBSITE:
      if (value == null) {
        unsetWebsite();
      } else {
        setWebsite((String)value);
      }
      break;

    case WEBSITE_TYPE:
      if (value == null) {
        unsetWebsiteType();
      } else {
        setWebsiteType((WMSWebsiteType)value);
      }
      break;

    case CRAWLER_TYPE:
      if (value == null) {
        unsetCrawlerType();
      } else {
        setCrawlerType((WMSWebsiteCrawlerType)value);
      }
      break;

    case URL_TYPE:
      if (value == null) {
        unsetUrlType();
      } else {
        setUrlType((WMSWebsiteUrlRuleType)value);
      }
      break;

    case URL_RULE:
      if (value == null) {
        unsetUrlRule();
      } else {
        setUrlRule((String)value);
      }
      break;

    case CONTENT_TYPE:
      if (value == null) {
        unsetContentType();
      } else {
        setContentType((WMSWebsiteContentRuleType)value);
      }
      break;

    case CONTENT_RULE:
      if (value == null) {
        unsetContentRule();
      } else {
        setContentRule((String)value);
      }
      break;

    case SEEDS:
      if (value == null) {
        unsetSeeds();
      } else {
        setSeeds((List<String>)value);
      }
      break;

    case CRAWLER_NUM:
      if (value == null) {
        unsetCrawlerNum();
      } else {
        setCrawlerNum((Integer)value);
      }
      break;

    case CRAWLER_SCHEDULE:
      if (value == null) {
        unsetCrawlerSchedule();
      } else {
        setCrawlerSchedule((Integer)value);
      }
      break;

    case WEBID:
      if (value == null) {
        unsetWebid();
      } else {
        setWebid((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case WEBSITE:
      return getWebsite();

    case WEBSITE_TYPE:
      return getWebsiteType();

    case CRAWLER_TYPE:
      return getCrawlerType();

    case URL_TYPE:
      return getUrlType();

    case URL_RULE:
      return getUrlRule();

    case CONTENT_TYPE:
      return getContentType();

    case CONTENT_RULE:
      return getContentRule();

    case SEEDS:
      return getSeeds();

    case CRAWLER_NUM:
      return Integer.valueOf(getCrawlerNum());

    case CRAWLER_SCHEDULE:
      return Integer.valueOf(getCrawlerSchedule());

    case WEBID:
      return Integer.valueOf(getWebid());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case WEBSITE:
      return isSetWebsite();
    case WEBSITE_TYPE:
      return isSetWebsiteType();
    case CRAWLER_TYPE:
      return isSetCrawlerType();
    case URL_TYPE:
      return isSetUrlType();
    case URL_RULE:
      return isSetUrlRule();
    case CONTENT_TYPE:
      return isSetContentType();
    case CONTENT_RULE:
      return isSetContentRule();
    case SEEDS:
      return isSetSeeds();
    case CRAWLER_NUM:
      return isSetCrawlerNum();
    case CRAWLER_SCHEDULE:
      return isSetCrawlerSchedule();
    case WEBID:
      return isSetWebid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WMSCrawlerWebsite)
      return this.equals((WMSCrawlerWebsite)that);
    return false;
  }

  public boolean equals(WMSCrawlerWebsite that) {
    if (that == null)
      return false;

    boolean this_present_website = true && this.isSetWebsite();
    boolean that_present_website = true && that.isSetWebsite();
    if (this_present_website || that_present_website) {
      if (!(this_present_website && that_present_website))
        return false;
      if (!this.website.equals(that.website))
        return false;
    }

    boolean this_present_websiteType = true && this.isSetWebsiteType();
    boolean that_present_websiteType = true && that.isSetWebsiteType();
    if (this_present_websiteType || that_present_websiteType) {
      if (!(this_present_websiteType && that_present_websiteType))
        return false;
      if (!this.websiteType.equals(that.websiteType))
        return false;
    }

    boolean this_present_crawlerType = true && this.isSetCrawlerType();
    boolean that_present_crawlerType = true && that.isSetCrawlerType();
    if (this_present_crawlerType || that_present_crawlerType) {
      if (!(this_present_crawlerType && that_present_crawlerType))
        return false;
      if (!this.crawlerType.equals(that.crawlerType))
        return false;
    }

    boolean this_present_urlType = true && this.isSetUrlType();
    boolean that_present_urlType = true && that.isSetUrlType();
    if (this_present_urlType || that_present_urlType) {
      if (!(this_present_urlType && that_present_urlType))
        return false;
      if (!this.urlType.equals(that.urlType))
        return false;
    }

    boolean this_present_urlRule = true && this.isSetUrlRule();
    boolean that_present_urlRule = true && that.isSetUrlRule();
    if (this_present_urlRule || that_present_urlRule) {
      if (!(this_present_urlRule && that_present_urlRule))
        return false;
      if (!this.urlRule.equals(that.urlRule))
        return false;
    }

    boolean this_present_contentType = true && this.isSetContentType();
    boolean that_present_contentType = true && that.isSetContentType();
    if (this_present_contentType || that_present_contentType) {
      if (!(this_present_contentType && that_present_contentType))
        return false;
      if (!this.contentType.equals(that.contentType))
        return false;
    }

    boolean this_present_contentRule = true && this.isSetContentRule();
    boolean that_present_contentRule = true && that.isSetContentRule();
    if (this_present_contentRule || that_present_contentRule) {
      if (!(this_present_contentRule && that_present_contentRule))
        return false;
      if (!this.contentRule.equals(that.contentRule))
        return false;
    }

    boolean this_present_seeds = true && this.isSetSeeds();
    boolean that_present_seeds = true && that.isSetSeeds();
    if (this_present_seeds || that_present_seeds) {
      if (!(this_present_seeds && that_present_seeds))
        return false;
      if (!this.seeds.equals(that.seeds))
        return false;
    }

    boolean this_present_crawlerNum = true;
    boolean that_present_crawlerNum = true;
    if (this_present_crawlerNum || that_present_crawlerNum) {
      if (!(this_present_crawlerNum && that_present_crawlerNum))
        return false;
      if (this.crawlerNum != that.crawlerNum)
        return false;
    }

    boolean this_present_crawlerSchedule = true && this.isSetCrawlerSchedule();
    boolean that_present_crawlerSchedule = true && that.isSetCrawlerSchedule();
    if (this_present_crawlerSchedule || that_present_crawlerSchedule) {
      if (!(this_present_crawlerSchedule && that_present_crawlerSchedule))
        return false;
      if (this.crawlerSchedule != that.crawlerSchedule)
        return false;
    }

    boolean this_present_webid = true && this.isSetWebid();
    boolean that_present_webid = true && that.isSetWebid();
    if (this_present_webid || that_present_webid) {
      if (!(this_present_webid && that_present_webid))
        return false;
      if (this.webid != that.webid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(WMSCrawlerWebsite other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    WMSCrawlerWebsite typedOther = (WMSCrawlerWebsite)other;

    lastComparison = Boolean.valueOf(isSetWebsite()).compareTo(typedOther.isSetWebsite());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWebsite()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.website, typedOther.website);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWebsiteType()).compareTo(typedOther.isSetWebsiteType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWebsiteType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.websiteType, typedOther.websiteType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCrawlerType()).compareTo(typedOther.isSetCrawlerType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCrawlerType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crawlerType, typedOther.crawlerType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrlType()).compareTo(typedOther.isSetUrlType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrlType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.urlType, typedOther.urlType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrlRule()).compareTo(typedOther.isSetUrlRule());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrlRule()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.urlRule, typedOther.urlRule);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentType()).compareTo(typedOther.isSetContentType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentType, typedOther.contentType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentRule()).compareTo(typedOther.isSetContentRule());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentRule()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentRule, typedOther.contentRule);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeeds()).compareTo(typedOther.isSetSeeds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeeds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seeds, typedOther.seeds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCrawlerNum()).compareTo(typedOther.isSetCrawlerNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCrawlerNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crawlerNum, typedOther.crawlerNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCrawlerSchedule()).compareTo(typedOther.isSetCrawlerSchedule());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCrawlerSchedule()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crawlerSchedule, typedOther.crawlerSchedule);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWebid()).compareTo(typedOther.isSetWebid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWebid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.webid, typedOther.webid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WMSCrawlerWebsite(");
    boolean first = true;

    sb.append("website:");
    if (this.website == null) {
      sb.append("null");
    } else {
      sb.append(this.website);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("websiteType:");
    if (this.websiteType == null) {
      sb.append("null");
    } else {
      sb.append(this.websiteType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("crawlerType:");
    if (this.crawlerType == null) {
      sb.append("null");
    } else {
      sb.append(this.crawlerType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("urlType:");
    if (this.urlType == null) {
      sb.append("null");
    } else {
      sb.append(this.urlType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("urlRule:");
    if (this.urlRule == null) {
      sb.append("null");
    } else {
      sb.append(this.urlRule);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contentType:");
    if (this.contentType == null) {
      sb.append("null");
    } else {
      sb.append(this.contentType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contentRule:");
    if (this.contentRule == null) {
      sb.append("null");
    } else {
      sb.append(this.contentRule);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("seeds:");
    if (this.seeds == null) {
      sb.append("null");
    } else {
      sb.append(this.seeds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("crawlerNum:");
    sb.append(this.crawlerNum);
    first = false;
    if (isSetCrawlerSchedule()) {
      if (!first) sb.append(", ");
      sb.append("crawlerSchedule:");
      sb.append(this.crawlerSchedule);
      first = false;
    }
    if (isSetWebid()) {
      if (!first) sb.append(", ");
      sb.append("webid:");
      sb.append(this.webid);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (website == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'website' was not present! Struct: " + toString());
    }
    if (websiteType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'websiteType' was not present! Struct: " + toString());
    }
    if (crawlerType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'crawlerType' was not present! Struct: " + toString());
    }
    if (urlType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'urlType' was not present! Struct: " + toString());
    }
    if (urlRule == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'urlRule' was not present! Struct: " + toString());
    }
    if (contentType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'contentType' was not present! Struct: " + toString());
    }
    if (contentRule == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'contentRule' was not present! Struct: " + toString());
    }
    if (seeds == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'seeds' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'crawlerNum' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WMSCrawlerWebsiteStandardSchemeFactory implements SchemeFactory {
    public WMSCrawlerWebsiteStandardScheme getScheme() {
      return new WMSCrawlerWebsiteStandardScheme();
    }
  }

  private static class WMSCrawlerWebsiteStandardScheme extends StandardScheme<WMSCrawlerWebsite> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WMSCrawlerWebsite struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WEBSITE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.website = iprot.readString();
              struct.setWebsiteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WEBSITE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.websiteType = WMSWebsiteType.findByValue(iprot.readI32());
              struct.setWebsiteTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CRAWLER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.crawlerType = WMSWebsiteCrawlerType.findByValue(iprot.readI32());
              struct.setCrawlerTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // URL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.urlType = WMSWebsiteUrlRuleType.findByValue(iprot.readI32());
              struct.setUrlTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // URL_RULE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.urlRule = iprot.readString();
              struct.setUrlRuleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CONTENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.contentType = WMSWebsiteContentRuleType.findByValue(iprot.readI32());
              struct.setContentTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONTENT_RULE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contentRule = iprot.readString();
              struct.setContentRuleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SEEDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.seeds = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2; // required
                  _elem2 = iprot.readString();
                  struct.seeds.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setSeedsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CRAWLER_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.crawlerNum = iprot.readI32();
              struct.setCrawlerNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CRAWLER_SCHEDULE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.crawlerSchedule = iprot.readI32();
              struct.setCrawlerScheduleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // WEBID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.webid = iprot.readI32();
              struct.setWebidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCrawlerNum()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'crawlerNum' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WMSCrawlerWebsite struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.website != null) {
        oprot.writeFieldBegin(WEBSITE_FIELD_DESC);
        oprot.writeString(struct.website);
        oprot.writeFieldEnd();
      }
      if (struct.websiteType != null) {
        oprot.writeFieldBegin(WEBSITE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.websiteType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.crawlerType != null) {
        oprot.writeFieldBegin(CRAWLER_TYPE_FIELD_DESC);
        oprot.writeI32(struct.crawlerType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.urlType != null) {
        oprot.writeFieldBegin(URL_TYPE_FIELD_DESC);
        oprot.writeI32(struct.urlType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.urlRule != null) {
        oprot.writeFieldBegin(URL_RULE_FIELD_DESC);
        oprot.writeString(struct.urlRule);
        oprot.writeFieldEnd();
      }
      if (struct.contentType != null) {
        oprot.writeFieldBegin(CONTENT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.contentType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.contentRule != null) {
        oprot.writeFieldBegin(CONTENT_RULE_FIELD_DESC);
        oprot.writeString(struct.contentRule);
        oprot.writeFieldEnd();
      }
      if (struct.seeds != null) {
        oprot.writeFieldBegin(SEEDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.seeds.size()));
          for (String _iter3 : struct.seeds)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CRAWLER_NUM_FIELD_DESC);
      oprot.writeI32(struct.crawlerNum);
      oprot.writeFieldEnd();
      if (struct.isSetCrawlerSchedule()) {
        oprot.writeFieldBegin(CRAWLER_SCHEDULE_FIELD_DESC);
        oprot.writeI32(struct.crawlerSchedule);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWebid()) {
        oprot.writeFieldBegin(WEBID_FIELD_DESC);
        oprot.writeI32(struct.webid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WMSCrawlerWebsiteTupleSchemeFactory implements SchemeFactory {
    public WMSCrawlerWebsiteTupleScheme getScheme() {
      return new WMSCrawlerWebsiteTupleScheme();
    }
  }

  private static class WMSCrawlerWebsiteTupleScheme extends TupleScheme<WMSCrawlerWebsite> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WMSCrawlerWebsite struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.website);
      oprot.writeI32(struct.websiteType.getValue());
      oprot.writeI32(struct.crawlerType.getValue());
      oprot.writeI32(struct.urlType.getValue());
      oprot.writeString(struct.urlRule);
      oprot.writeI32(struct.contentType.getValue());
      oprot.writeString(struct.contentRule);
      {
        oprot.writeI32(struct.seeds.size());
        for (String _iter4 : struct.seeds)
        {
          oprot.writeString(_iter4);
        }
      }
      oprot.writeI32(struct.crawlerNum);
      BitSet optionals = new BitSet();
      if (struct.isSetCrawlerSchedule()) {
        optionals.set(0);
      }
      if (struct.isSetWebid()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetCrawlerSchedule()) {
        oprot.writeI32(struct.crawlerSchedule);
      }
      if (struct.isSetWebid()) {
        oprot.writeI32(struct.webid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WMSCrawlerWebsite struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.website = iprot.readString();
      struct.setWebsiteIsSet(true);
      struct.websiteType = WMSWebsiteType.findByValue(iprot.readI32());
      struct.setWebsiteTypeIsSet(true);
      struct.crawlerType = WMSWebsiteCrawlerType.findByValue(iprot.readI32());
      struct.setCrawlerTypeIsSet(true);
      struct.urlType = WMSWebsiteUrlRuleType.findByValue(iprot.readI32());
      struct.setUrlTypeIsSet(true);
      struct.urlRule = iprot.readString();
      struct.setUrlRuleIsSet(true);
      struct.contentType = WMSWebsiteContentRuleType.findByValue(iprot.readI32());
      struct.setContentTypeIsSet(true);
      struct.contentRule = iprot.readString();
      struct.setContentRuleIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.seeds = new ArrayList<String>(_list5.size);
        for (int _i6 = 0; _i6 < _list5.size; ++_i6)
        {
          String _elem7; // required
          _elem7 = iprot.readString();
          struct.seeds.add(_elem7);
        }
      }
      struct.setSeedsIsSet(true);
      struct.crawlerNum = iprot.readI32();
      struct.setCrawlerNumIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.crawlerSchedule = iprot.readI32();
        struct.setCrawlerScheduleIsSet(true);
      }
      if (incoming.get(1)) {
        struct.webid = iprot.readI32();
        struct.setWebidIsSet(true);
      }
    }
  }

}

