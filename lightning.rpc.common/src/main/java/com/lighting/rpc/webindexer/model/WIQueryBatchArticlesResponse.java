/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lighting.rpc.webindexer.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class WIQueryBatchArticlesResponse implements org.apache.thrift.TBase<WIQueryBatchArticlesResponse, WIQueryBatchArticlesResponse._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WIQueryBatchArticlesResponse");

  private static final org.apache.thrift.protocol.TField ARTICLES_FIELD_DESC = new org.apache.thrift.protocol.TField("articles", org.apache.thrift.protocol.TType.LIST, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WIQueryBatchArticlesResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WIQueryBatchArticlesResponseTupleSchemeFactory());
  }

  public List<WIWebArticle> articles; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ARTICLES((short)1, "articles");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ARTICLES
          return ARTICLES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ARTICLES, new org.apache.thrift.meta_data.FieldMetaData("articles", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WIWebArticle.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WIQueryBatchArticlesResponse.class, metaDataMap);
  }

  public WIQueryBatchArticlesResponse() {
  }

  public WIQueryBatchArticlesResponse(
    List<WIWebArticle> articles)
  {
    this();
    this.articles = articles;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WIQueryBatchArticlesResponse(WIQueryBatchArticlesResponse other) {
    if (other.isSetArticles()) {
      List<WIWebArticle> __this__articles = new ArrayList<WIWebArticle>();
      for (WIWebArticle other_element : other.articles) {
        __this__articles.add(new WIWebArticle(other_element));
      }
      this.articles = __this__articles;
    }
  }

  public WIQueryBatchArticlesResponse deepCopy() {
    return new WIQueryBatchArticlesResponse(this);
  }

  @Override
  public void clear() {
    this.articles = null;
  }

  public int getArticlesSize() {
    return (this.articles == null) ? 0 : this.articles.size();
  }

  public java.util.Iterator<WIWebArticle> getArticlesIterator() {
    return (this.articles == null) ? null : this.articles.iterator();
  }

  public void addToArticles(WIWebArticle elem) {
    if (this.articles == null) {
      this.articles = new ArrayList<WIWebArticle>();
    }
    this.articles.add(elem);
  }

  public List<WIWebArticle> getArticles() {
    return this.articles;
  }

  public WIQueryBatchArticlesResponse setArticles(List<WIWebArticle> articles) {
    this.articles = articles;
    return this;
  }

  public void unsetArticles() {
    this.articles = null;
  }

  /** Returns true if field articles is set (has been assigned a value) and false otherwise */
  public boolean isSetArticles() {
    return this.articles != null;
  }

  public void setArticlesIsSet(boolean value) {
    if (!value) {
      this.articles = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ARTICLES:
      if (value == null) {
        unsetArticles();
      } else {
        setArticles((List<WIWebArticle>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ARTICLES:
      return getArticles();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ARTICLES:
      return isSetArticles();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WIQueryBatchArticlesResponse)
      return this.equals((WIQueryBatchArticlesResponse)that);
    return false;
  }

  public boolean equals(WIQueryBatchArticlesResponse that) {
    if (that == null)
      return false;

    boolean this_present_articles = true && this.isSetArticles();
    boolean that_present_articles = true && that.isSetArticles();
    if (this_present_articles || that_present_articles) {
      if (!(this_present_articles && that_present_articles))
        return false;
      if (!this.articles.equals(that.articles))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(WIQueryBatchArticlesResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    WIQueryBatchArticlesResponse typedOther = (WIQueryBatchArticlesResponse)other;

    lastComparison = Boolean.valueOf(isSetArticles()).compareTo(typedOther.isSetArticles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArticles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.articles, typedOther.articles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WIQueryBatchArticlesResponse(");
    boolean first = true;

    sb.append("articles:");
    if (this.articles == null) {
      sb.append("null");
    } else {
      sb.append(this.articles);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (articles == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'articles' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WIQueryBatchArticlesResponseStandardSchemeFactory implements SchemeFactory {
    public WIQueryBatchArticlesResponseStandardScheme getScheme() {
      return new WIQueryBatchArticlesResponseStandardScheme();
    }
  }

  private static class WIQueryBatchArticlesResponseStandardScheme extends StandardScheme<WIQueryBatchArticlesResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WIQueryBatchArticlesResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ARTICLES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.articles = new ArrayList<WIWebArticle>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                {
                  WIWebArticle _elem18; // required
                  _elem18 = new WIWebArticle();
                  _elem18.read(iprot);
                  struct.articles.add(_elem18);
                }
                iprot.readListEnd();
              }
              struct.setArticlesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WIQueryBatchArticlesResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.articles != null) {
        oprot.writeFieldBegin(ARTICLES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.articles.size()));
          for (WIWebArticle _iter19 : struct.articles)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WIQueryBatchArticlesResponseTupleSchemeFactory implements SchemeFactory {
    public WIQueryBatchArticlesResponseTupleScheme getScheme() {
      return new WIQueryBatchArticlesResponseTupleScheme();
    }
  }

  private static class WIQueryBatchArticlesResponseTupleScheme extends TupleScheme<WIQueryBatchArticlesResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WIQueryBatchArticlesResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.articles.size());
        for (WIWebArticle _iter20 : struct.articles)
        {
          _iter20.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WIQueryBatchArticlesResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.articles = new ArrayList<WIWebArticle>(_list21.size);
        for (int _i22 = 0; _i22 < _list21.size; ++_i22)
        {
          WIWebArticle _elem23; // required
          _elem23 = new WIWebArticle();
          _elem23.read(iprot);
          struct.articles.add(_elem23);
        }
      }
      struct.setArticlesIsSet(true);
    }
  }

}

