/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lighting.rpc.webindexer.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class WIQueryBatchArticlesRequest implements org.apache.thrift.TBase<WIQueryBatchArticlesRequest, WIQueryBatchArticlesRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WIQueryBatchArticlesRequest");

  private static final org.apache.thrift.protocol.TField LOGID_FIELD_DESC = new org.apache.thrift.protocol.TField("logid", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField DOCIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("docids", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WIQueryBatchArticlesRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WIQueryBatchArticlesRequestTupleSchemeFactory());
  }

  public long logid; // required
  public List<Integer> docids; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOGID((short)1, "logid"),
    DOCIDS((short)2, "docids");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOGID
          return LOGID;
        case 2: // DOCIDS
          return DOCIDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LOGID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOGID, new org.apache.thrift.meta_data.FieldMetaData("logid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOCIDS, new org.apache.thrift.meta_data.FieldMetaData("docids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WIQueryBatchArticlesRequest.class, metaDataMap);
  }

  public WIQueryBatchArticlesRequest() {
  }

  public WIQueryBatchArticlesRequest(
    long logid,
    List<Integer> docids)
  {
    this();
    this.logid = logid;
    setLogidIsSet(true);
    this.docids = docids;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WIQueryBatchArticlesRequest(WIQueryBatchArticlesRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    this.logid = other.logid;
    if (other.isSetDocids()) {
      List<Integer> __this__docids = new ArrayList<Integer>();
      for (Integer other_element : other.docids) {
        __this__docids.add(other_element);
      }
      this.docids = __this__docids;
    }
  }

  public WIQueryBatchArticlesRequest deepCopy() {
    return new WIQueryBatchArticlesRequest(this);
  }

  @Override
  public void clear() {
    setLogidIsSet(false);
    this.logid = 0;
    this.docids = null;
  }

  public long getLogid() {
    return this.logid;
  }

  public WIQueryBatchArticlesRequest setLogid(long logid) {
    this.logid = logid;
    setLogidIsSet(true);
    return this;
  }

  public void unsetLogid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGID_ISSET_ID);
  }

  /** Returns true if field logid is set (has been assigned a value) and false otherwise */
  public boolean isSetLogid() {
    return EncodingUtils.testBit(__isset_bitfield, __LOGID_ISSET_ID);
  }

  public void setLogidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGID_ISSET_ID, value);
  }

  public int getDocidsSize() {
    return (this.docids == null) ? 0 : this.docids.size();
  }

  public java.util.Iterator<Integer> getDocidsIterator() {
    return (this.docids == null) ? null : this.docids.iterator();
  }

  public void addToDocids(int elem) {
    if (this.docids == null) {
      this.docids = new ArrayList<Integer>();
    }
    this.docids.add(elem);
  }

  public List<Integer> getDocids() {
    return this.docids;
  }

  public WIQueryBatchArticlesRequest setDocids(List<Integer> docids) {
    this.docids = docids;
    return this;
  }

  public void unsetDocids() {
    this.docids = null;
  }

  /** Returns true if field docids is set (has been assigned a value) and false otherwise */
  public boolean isSetDocids() {
    return this.docids != null;
  }

  public void setDocidsIsSet(boolean value) {
    if (!value) {
      this.docids = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOGID:
      if (value == null) {
        unsetLogid();
      } else {
        setLogid((Long)value);
      }
      break;

    case DOCIDS:
      if (value == null) {
        unsetDocids();
      } else {
        setDocids((List<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOGID:
      return Long.valueOf(getLogid());

    case DOCIDS:
      return getDocids();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOGID:
      return isSetLogid();
    case DOCIDS:
      return isSetDocids();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WIQueryBatchArticlesRequest)
      return this.equals((WIQueryBatchArticlesRequest)that);
    return false;
  }

  public boolean equals(WIQueryBatchArticlesRequest that) {
    if (that == null)
      return false;

    boolean this_present_logid = true;
    boolean that_present_logid = true;
    if (this_present_logid || that_present_logid) {
      if (!(this_present_logid && that_present_logid))
        return false;
      if (this.logid != that.logid)
        return false;
    }

    boolean this_present_docids = true && this.isSetDocids();
    boolean that_present_docids = true && that.isSetDocids();
    if (this_present_docids || that_present_docids) {
      if (!(this_present_docids && that_present_docids))
        return false;
      if (!this.docids.equals(that.docids))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(WIQueryBatchArticlesRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    WIQueryBatchArticlesRequest typedOther = (WIQueryBatchArticlesRequest)other;

    lastComparison = Boolean.valueOf(isSetLogid()).compareTo(typedOther.isSetLogid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logid, typedOther.logid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDocids()).compareTo(typedOther.isSetDocids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.docids, typedOther.docids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WIQueryBatchArticlesRequest(");
    boolean first = true;

    sb.append("logid:");
    sb.append(this.logid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("docids:");
    if (this.docids == null) {
      sb.append("null");
    } else {
      sb.append(this.docids);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'logid' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WIQueryBatchArticlesRequestStandardSchemeFactory implements SchemeFactory {
    public WIQueryBatchArticlesRequestStandardScheme getScheme() {
      return new WIQueryBatchArticlesRequestStandardScheme();
    }
  }

  private static class WIQueryBatchArticlesRequestStandardScheme extends StandardScheme<WIQueryBatchArticlesRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WIQueryBatchArticlesRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOGID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.logid = iprot.readI64();
              struct.setLogidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DOCIDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.docids = new ArrayList<Integer>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  int _elem10; // required
                  _elem10 = iprot.readI32();
                  struct.docids.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setDocidsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetLogid()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'logid' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WIQueryBatchArticlesRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LOGID_FIELD_DESC);
      oprot.writeI64(struct.logid);
      oprot.writeFieldEnd();
      if (struct.docids != null) {
        oprot.writeFieldBegin(DOCIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.docids.size()));
          for (int _iter11 : struct.docids)
          {
            oprot.writeI32(_iter11);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WIQueryBatchArticlesRequestTupleSchemeFactory implements SchemeFactory {
    public WIQueryBatchArticlesRequestTupleScheme getScheme() {
      return new WIQueryBatchArticlesRequestTupleScheme();
    }
  }

  private static class WIQueryBatchArticlesRequestTupleScheme extends TupleScheme<WIQueryBatchArticlesRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WIQueryBatchArticlesRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.logid);
      BitSet optionals = new BitSet();
      if (struct.isSetDocids()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetDocids()) {
        {
          oprot.writeI32(struct.docids.size());
          for (int _iter12 : struct.docids)
          {
            oprot.writeI32(_iter12);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WIQueryBatchArticlesRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.logid = iprot.readI64();
      struct.setLogidIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.docids = new ArrayList<Integer>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            int _elem15; // required
            _elem15 = iprot.readI32();
            struct.docids.add(_elem15);
          }
        }
        struct.setDocidsIsSet(true);
      }
    }
  }

}

