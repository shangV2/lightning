/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lighting.rpc.datacenter.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DCQueryHotWebEventsResponse implements org.apache.thrift.TBase<DCQueryHotWebEventsResponse, DCQueryHotWebEventsResponse._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DCQueryHotWebEventsResponse");

  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField HOT_EVENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("hotEvents", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DCQueryHotWebEventsResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DCQueryHotWebEventsResponseTupleSchemeFactory());
  }

  public String timestamp; // required
  public List<DCHotWebEvent> hotEvents; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIMESTAMP((short)1, "timestamp"),
    HOT_EVENTS((short)2, "hotEvents");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIMESTAMP
          return TIMESTAMP;
        case 2: // HOT_EVENTS
          return HOT_EVENTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOT_EVENTS, new org.apache.thrift.meta_data.FieldMetaData("hotEvents", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DCHotWebEvent.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DCQueryHotWebEventsResponse.class, metaDataMap);
  }

  public DCQueryHotWebEventsResponse() {
  }

  public DCQueryHotWebEventsResponse(
    String timestamp,
    List<DCHotWebEvent> hotEvents)
  {
    this();
    this.timestamp = timestamp;
    this.hotEvents = hotEvents;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DCQueryHotWebEventsResponse(DCQueryHotWebEventsResponse other) {
    if (other.isSetTimestamp()) {
      this.timestamp = other.timestamp;
    }
    if (other.isSetHotEvents()) {
      List<DCHotWebEvent> __this__hotEvents = new ArrayList<DCHotWebEvent>();
      for (DCHotWebEvent other_element : other.hotEvents) {
        __this__hotEvents.add(new DCHotWebEvent(other_element));
      }
      this.hotEvents = __this__hotEvents;
    }
  }

  public DCQueryHotWebEventsResponse deepCopy() {
    return new DCQueryHotWebEventsResponse(this);
  }

  @Override
  public void clear() {
    this.timestamp = null;
    this.hotEvents = null;
  }

  public String getTimestamp() {
    return this.timestamp;
  }

  public DCQueryHotWebEventsResponse setTimestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  public void unsetTimestamp() {
    this.timestamp = null;
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return this.timestamp != null;
  }

  public void setTimestampIsSet(boolean value) {
    if (!value) {
      this.timestamp = null;
    }
  }

  public int getHotEventsSize() {
    return (this.hotEvents == null) ? 0 : this.hotEvents.size();
  }

  public java.util.Iterator<DCHotWebEvent> getHotEventsIterator() {
    return (this.hotEvents == null) ? null : this.hotEvents.iterator();
  }

  public void addToHotEvents(DCHotWebEvent elem) {
    if (this.hotEvents == null) {
      this.hotEvents = new ArrayList<DCHotWebEvent>();
    }
    this.hotEvents.add(elem);
  }

  public List<DCHotWebEvent> getHotEvents() {
    return this.hotEvents;
  }

  public DCQueryHotWebEventsResponse setHotEvents(List<DCHotWebEvent> hotEvents) {
    this.hotEvents = hotEvents;
    return this;
  }

  public void unsetHotEvents() {
    this.hotEvents = null;
  }

  /** Returns true if field hotEvents is set (has been assigned a value) and false otherwise */
  public boolean isSetHotEvents() {
    return this.hotEvents != null;
  }

  public void setHotEventsIsSet(boolean value) {
    if (!value) {
      this.hotEvents = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((String)value);
      }
      break;

    case HOT_EVENTS:
      if (value == null) {
        unsetHotEvents();
      } else {
        setHotEvents((List<DCHotWebEvent>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TIMESTAMP:
      return getTimestamp();

    case HOT_EVENTS:
      return getHotEvents();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TIMESTAMP:
      return isSetTimestamp();
    case HOT_EVENTS:
      return isSetHotEvents();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DCQueryHotWebEventsResponse)
      return this.equals((DCQueryHotWebEventsResponse)that);
    return false;
  }

  public boolean equals(DCQueryHotWebEventsResponse that) {
    if (that == null)
      return false;

    boolean this_present_timestamp = true && this.isSetTimestamp();
    boolean that_present_timestamp = true && that.isSetTimestamp();
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (!this.timestamp.equals(that.timestamp))
        return false;
    }

    boolean this_present_hotEvents = true && this.isSetHotEvents();
    boolean that_present_hotEvents = true && that.isSetHotEvents();
    if (this_present_hotEvents || that_present_hotEvents) {
      if (!(this_present_hotEvents && that_present_hotEvents))
        return false;
      if (!this.hotEvents.equals(that.hotEvents))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(DCQueryHotWebEventsResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DCQueryHotWebEventsResponse typedOther = (DCQueryHotWebEventsResponse)other;

    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHotEvents()).compareTo(typedOther.isSetHotEvents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHotEvents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hotEvents, typedOther.hotEvents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DCQueryHotWebEventsResponse(");
    boolean first = true;

    sb.append("timestamp:");
    if (this.timestamp == null) {
      sb.append("null");
    } else {
      sb.append(this.timestamp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hotEvents:");
    if (this.hotEvents == null) {
      sb.append("null");
    } else {
      sb.append(this.hotEvents);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (timestamp == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'timestamp' was not present! Struct: " + toString());
    }
    if (hotEvents == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'hotEvents' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DCQueryHotWebEventsResponseStandardSchemeFactory implements SchemeFactory {
    public DCQueryHotWebEventsResponseStandardScheme getScheme() {
      return new DCQueryHotWebEventsResponseStandardScheme();
    }
  }

  private static class DCQueryHotWebEventsResponseStandardScheme extends StandardScheme<DCQueryHotWebEventsResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DCQueryHotWebEventsResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.timestamp = iprot.readString();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HOT_EVENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.hotEvents = new ArrayList<DCHotWebEvent>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  DCHotWebEvent _elem2; // required
                  _elem2 = new DCHotWebEvent();
                  _elem2.read(iprot);
                  struct.hotEvents.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setHotEventsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DCQueryHotWebEventsResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.timestamp != null) {
        oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
        oprot.writeString(struct.timestamp);
        oprot.writeFieldEnd();
      }
      if (struct.hotEvents != null) {
        oprot.writeFieldBegin(HOT_EVENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.hotEvents.size()));
          for (DCHotWebEvent _iter3 : struct.hotEvents)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DCQueryHotWebEventsResponseTupleSchemeFactory implements SchemeFactory {
    public DCQueryHotWebEventsResponseTupleScheme getScheme() {
      return new DCQueryHotWebEventsResponseTupleScheme();
    }
  }

  private static class DCQueryHotWebEventsResponseTupleScheme extends TupleScheme<DCQueryHotWebEventsResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DCQueryHotWebEventsResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.timestamp);
      {
        oprot.writeI32(struct.hotEvents.size());
        for (DCHotWebEvent _iter4 : struct.hotEvents)
        {
          _iter4.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DCQueryHotWebEventsResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.timestamp = iprot.readString();
      struct.setTimestampIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.hotEvents = new ArrayList<DCHotWebEvent>(_list5.size);
        for (int _i6 = 0; _i6 < _list5.size; ++_i6)
        {
          DCHotWebEvent _elem7; // required
          _elem7 = new DCHotWebEvent();
          _elem7.read(iprot);
          struct.hotEvents.add(_elem7);
        }
      }
      struct.setHotEventsIsSet(true);
    }
  }

}

