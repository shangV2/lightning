/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qing.logiclayer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class QueryTracePublicWordRequest implements org.apache.thrift.TBase<QueryTracePublicWordRequest, QueryTracePublicWordRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryTracePublicWordRequest");

  private static final org.apache.thrift.protocol.TField LANGUGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("langugeType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TRACE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("traceIds", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryTracePublicWordRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryTracePublicWordRequestTupleSchemeFactory());
  }

  /**
   * 
   * @see OpenCommonLanguge
   */
  public OpenCommonLanguge langugeType; // required
  public List<TraceId> traceIds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see OpenCommonLanguge
     */
    LANGUGE_TYPE((short)1, "langugeType"),
    TRACE_IDS((short)2, "traceIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LANGUGE_TYPE
          return LANGUGE_TYPE;
        case 2: // TRACE_IDS
          return TRACE_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LANGUGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("langugeType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OpenCommonLanguge.class)));
    tmpMap.put(_Fields.TRACE_IDS, new org.apache.thrift.meta_data.FieldMetaData("traceIds", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TraceId.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryTracePublicWordRequest.class, metaDataMap);
  }

  public QueryTracePublicWordRequest() {
    this.langugeType = com.qing.logiclayer.OpenCommonLanguge.OC_LAN_CHINESE_ZH_CN;

  }

  public QueryTracePublicWordRequest(
    OpenCommonLanguge langugeType,
    List<TraceId> traceIds)
  {
    this();
    this.langugeType = langugeType;
    this.traceIds = traceIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryTracePublicWordRequest(QueryTracePublicWordRequest other) {
    if (other.isSetLangugeType()) {
      this.langugeType = other.langugeType;
    }
    if (other.isSetTraceIds()) {
      List<TraceId> __this__traceIds = new ArrayList<TraceId>();
      for (TraceId other_element : other.traceIds) {
        __this__traceIds.add(new TraceId(other_element));
      }
      this.traceIds = __this__traceIds;
    }
  }

  public QueryTracePublicWordRequest deepCopy() {
    return new QueryTracePublicWordRequest(this);
  }

  @Override
  public void clear() {
    this.langugeType = com.qing.logiclayer.OpenCommonLanguge.OC_LAN_CHINESE_ZH_CN;

    this.traceIds = null;
  }

  /**
   * 
   * @see OpenCommonLanguge
   */
  public OpenCommonLanguge getLangugeType() {
    return this.langugeType;
  }

  /**
   * 
   * @see OpenCommonLanguge
   */
  public QueryTracePublicWordRequest setLangugeType(OpenCommonLanguge langugeType) {
    this.langugeType = langugeType;
    return this;
  }

  public void unsetLangugeType() {
    this.langugeType = null;
  }

  /** Returns true if field langugeType is set (has been assigned a value) and false otherwise */
  public boolean isSetLangugeType() {
    return this.langugeType != null;
  }

  public void setLangugeTypeIsSet(boolean value) {
    if (!value) {
      this.langugeType = null;
    }
  }

  public int getTraceIdsSize() {
    return (this.traceIds == null) ? 0 : this.traceIds.size();
  }

  public java.util.Iterator<TraceId> getTraceIdsIterator() {
    return (this.traceIds == null) ? null : this.traceIds.iterator();
  }

  public void addToTraceIds(TraceId elem) {
    if (this.traceIds == null) {
      this.traceIds = new ArrayList<TraceId>();
    }
    this.traceIds.add(elem);
  }

  public List<TraceId> getTraceIds() {
    return this.traceIds;
  }

  public QueryTracePublicWordRequest setTraceIds(List<TraceId> traceIds) {
    this.traceIds = traceIds;
    return this;
  }

  public void unsetTraceIds() {
    this.traceIds = null;
  }

  /** Returns true if field traceIds is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceIds() {
    return this.traceIds != null;
  }

  public void setTraceIdsIsSet(boolean value) {
    if (!value) {
      this.traceIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LANGUGE_TYPE:
      if (value == null) {
        unsetLangugeType();
      } else {
        setLangugeType((OpenCommonLanguge)value);
      }
      break;

    case TRACE_IDS:
      if (value == null) {
        unsetTraceIds();
      } else {
        setTraceIds((List<TraceId>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LANGUGE_TYPE:
      return getLangugeType();

    case TRACE_IDS:
      return getTraceIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LANGUGE_TYPE:
      return isSetLangugeType();
    case TRACE_IDS:
      return isSetTraceIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryTracePublicWordRequest)
      return this.equals((QueryTracePublicWordRequest)that);
    return false;
  }

  public boolean equals(QueryTracePublicWordRequest that) {
    if (that == null)
      return false;

    boolean this_present_langugeType = true && this.isSetLangugeType();
    boolean that_present_langugeType = true && that.isSetLangugeType();
    if (this_present_langugeType || that_present_langugeType) {
      if (!(this_present_langugeType && that_present_langugeType))
        return false;
      if (!this.langugeType.equals(that.langugeType))
        return false;
    }

    boolean this_present_traceIds = true && this.isSetTraceIds();
    boolean that_present_traceIds = true && that.isSetTraceIds();
    if (this_present_traceIds || that_present_traceIds) {
      if (!(this_present_traceIds && that_present_traceIds))
        return false;
      if (!this.traceIds.equals(that.traceIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(QueryTracePublicWordRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    QueryTracePublicWordRequest typedOther = (QueryTracePublicWordRequest)other;

    lastComparison = Boolean.valueOf(isSetLangugeType()).compareTo(typedOther.isSetLangugeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLangugeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.langugeType, typedOther.langugeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraceIds()).compareTo(typedOther.isSetTraceIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceIds, typedOther.traceIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryTracePublicWordRequest(");
    boolean first = true;

    sb.append("langugeType:");
    if (this.langugeType == null) {
      sb.append("null");
    } else {
      sb.append(this.langugeType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("traceIds:");
    if (this.traceIds == null) {
      sb.append("null");
    } else {
      sb.append(this.traceIds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (langugeType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'langugeType' was not present! Struct: " + toString());
    }
    if (traceIds == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'traceIds' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryTracePublicWordRequestStandardSchemeFactory implements SchemeFactory {
    public QueryTracePublicWordRequestStandardScheme getScheme() {
      return new QueryTracePublicWordRequestStandardScheme();
    }
  }

  private static class QueryTracePublicWordRequestStandardScheme extends StandardScheme<QueryTracePublicWordRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryTracePublicWordRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LANGUGE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.langugeType = OpenCommonLanguge.findByValue(iprot.readI32());
              struct.setLangugeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TRACE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.traceIds = new ArrayList<TraceId>(_list40.size);
                for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                {
                  TraceId _elem42; // required
                  _elem42 = new TraceId();
                  _elem42.read(iprot);
                  struct.traceIds.add(_elem42);
                }
                iprot.readListEnd();
              }
              struct.setTraceIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryTracePublicWordRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.langugeType != null) {
        oprot.writeFieldBegin(LANGUGE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.langugeType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.traceIds != null) {
        oprot.writeFieldBegin(TRACE_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.traceIds.size()));
          for (TraceId _iter43 : struct.traceIds)
          {
            _iter43.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryTracePublicWordRequestTupleSchemeFactory implements SchemeFactory {
    public QueryTracePublicWordRequestTupleScheme getScheme() {
      return new QueryTracePublicWordRequestTupleScheme();
    }
  }

  private static class QueryTracePublicWordRequestTupleScheme extends TupleScheme<QueryTracePublicWordRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryTracePublicWordRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.langugeType.getValue());
      {
        oprot.writeI32(struct.traceIds.size());
        for (TraceId _iter44 : struct.traceIds)
        {
          _iter44.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryTracePublicWordRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.langugeType = OpenCommonLanguge.findByValue(iprot.readI32());
      struct.setLangugeTypeIsSet(true);
      {
        org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.traceIds = new ArrayList<TraceId>(_list45.size);
        for (int _i46 = 0; _i46 < _list45.size; ++_i46)
        {
          TraceId _elem47; // required
          _elem47 = new TraceId();
          _elem47.read(iprot);
          struct.traceIds.add(_elem47);
        }
      }
      struct.setTraceIdsIsSet(true);
    }
  }

}

