/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qing.logiclayer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class OpenShortMessageContent implements org.apache.thrift.TBase<OpenShortMessageContent, OpenShortMessageContent._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OpenShortMessageContent");

  private static final org.apache.thrift.protocol.TField DOCID_FIELD_DESC = new org.apache.thrift.protocol.TField("docid", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SEND_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("sendPhone", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SEND_USERMAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sendUsermame", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RECV_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("recvPhone", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField RECV_USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("recvUsername", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OpenShortMessageContentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OpenShortMessageContentTupleSchemeFactory());
  }

  public long docid; // required
  public String sendPhone; // required
  public String sendUsermame; // required
  public String recvPhone; // required
  public String recvUsername; // required
  public String message; // required
  public String timestamp; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DOCID((short)1, "docid"),
    SEND_PHONE((short)2, "sendPhone"),
    SEND_USERMAME((short)3, "sendUsermame"),
    RECV_PHONE((short)4, "recvPhone"),
    RECV_USERNAME((short)5, "recvUsername"),
    MESSAGE((short)6, "message"),
    TIMESTAMP((short)7, "timestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DOCID
          return DOCID;
        case 2: // SEND_PHONE
          return SEND_PHONE;
        case 3: // SEND_USERMAME
          return SEND_USERMAME;
        case 4: // RECV_PHONE
          return RECV_PHONE;
        case 5: // RECV_USERNAME
          return RECV_USERNAME;
        case 6: // MESSAGE
          return MESSAGE;
        case 7: // TIMESTAMP
          return TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DOCID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DOCID, new org.apache.thrift.meta_data.FieldMetaData("docid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SEND_PHONE, new org.apache.thrift.meta_data.FieldMetaData("sendPhone", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEND_USERMAME, new org.apache.thrift.meta_data.FieldMetaData("sendUsermame", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECV_PHONE, new org.apache.thrift.meta_data.FieldMetaData("recvPhone", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECV_USERNAME, new org.apache.thrift.meta_data.FieldMetaData("recvUsername", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OpenShortMessageContent.class, metaDataMap);
  }

  public OpenShortMessageContent() {
  }

  public OpenShortMessageContent(
    long docid,
    String sendPhone,
    String sendUsermame,
    String recvPhone,
    String recvUsername,
    String message,
    String timestamp)
  {
    this();
    this.docid = docid;
    setDocidIsSet(true);
    this.sendPhone = sendPhone;
    this.sendUsermame = sendUsermame;
    this.recvPhone = recvPhone;
    this.recvUsername = recvUsername;
    this.message = message;
    this.timestamp = timestamp;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OpenShortMessageContent(OpenShortMessageContent other) {
    __isset_bitfield = other.__isset_bitfield;
    this.docid = other.docid;
    if (other.isSetSendPhone()) {
      this.sendPhone = other.sendPhone;
    }
    if (other.isSetSendUsermame()) {
      this.sendUsermame = other.sendUsermame;
    }
    if (other.isSetRecvPhone()) {
      this.recvPhone = other.recvPhone;
    }
    if (other.isSetRecvUsername()) {
      this.recvUsername = other.recvUsername;
    }
    if (other.isSetMessage()) {
      this.message = other.message;
    }
    if (other.isSetTimestamp()) {
      this.timestamp = other.timestamp;
    }
  }

  public OpenShortMessageContent deepCopy() {
    return new OpenShortMessageContent(this);
  }

  @Override
  public void clear() {
    setDocidIsSet(false);
    this.docid = 0;
    this.sendPhone = null;
    this.sendUsermame = null;
    this.recvPhone = null;
    this.recvUsername = null;
    this.message = null;
    this.timestamp = null;
  }

  public long getDocid() {
    return this.docid;
  }

  public OpenShortMessageContent setDocid(long docid) {
    this.docid = docid;
    setDocidIsSet(true);
    return this;
  }

  public void unsetDocid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOCID_ISSET_ID);
  }

  /** Returns true if field docid is set (has been assigned a value) and false otherwise */
  public boolean isSetDocid() {
    return EncodingUtils.testBit(__isset_bitfield, __DOCID_ISSET_ID);
  }

  public void setDocidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOCID_ISSET_ID, value);
  }

  public String getSendPhone() {
    return this.sendPhone;
  }

  public OpenShortMessageContent setSendPhone(String sendPhone) {
    this.sendPhone = sendPhone;
    return this;
  }

  public void unsetSendPhone() {
    this.sendPhone = null;
  }

  /** Returns true if field sendPhone is set (has been assigned a value) and false otherwise */
  public boolean isSetSendPhone() {
    return this.sendPhone != null;
  }

  public void setSendPhoneIsSet(boolean value) {
    if (!value) {
      this.sendPhone = null;
    }
  }

  public String getSendUsermame() {
    return this.sendUsermame;
  }

  public OpenShortMessageContent setSendUsermame(String sendUsermame) {
    this.sendUsermame = sendUsermame;
    return this;
  }

  public void unsetSendUsermame() {
    this.sendUsermame = null;
  }

  /** Returns true if field sendUsermame is set (has been assigned a value) and false otherwise */
  public boolean isSetSendUsermame() {
    return this.sendUsermame != null;
  }

  public void setSendUsermameIsSet(boolean value) {
    if (!value) {
      this.sendUsermame = null;
    }
  }

  public String getRecvPhone() {
    return this.recvPhone;
  }

  public OpenShortMessageContent setRecvPhone(String recvPhone) {
    this.recvPhone = recvPhone;
    return this;
  }

  public void unsetRecvPhone() {
    this.recvPhone = null;
  }

  /** Returns true if field recvPhone is set (has been assigned a value) and false otherwise */
  public boolean isSetRecvPhone() {
    return this.recvPhone != null;
  }

  public void setRecvPhoneIsSet(boolean value) {
    if (!value) {
      this.recvPhone = null;
    }
  }

  public String getRecvUsername() {
    return this.recvUsername;
  }

  public OpenShortMessageContent setRecvUsername(String recvUsername) {
    this.recvUsername = recvUsername;
    return this;
  }

  public void unsetRecvUsername() {
    this.recvUsername = null;
  }

  /** Returns true if field recvUsername is set (has been assigned a value) and false otherwise */
  public boolean isSetRecvUsername() {
    return this.recvUsername != null;
  }

  public void setRecvUsernameIsSet(boolean value) {
    if (!value) {
      this.recvUsername = null;
    }
  }

  public String getMessage() {
    return this.message;
  }

  public OpenShortMessageContent setMessage(String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public String getTimestamp() {
    return this.timestamp;
  }

  public OpenShortMessageContent setTimestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  public void unsetTimestamp() {
    this.timestamp = null;
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return this.timestamp != null;
  }

  public void setTimestampIsSet(boolean value) {
    if (!value) {
      this.timestamp = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DOCID:
      if (value == null) {
        unsetDocid();
      } else {
        setDocid((Long)value);
      }
      break;

    case SEND_PHONE:
      if (value == null) {
        unsetSendPhone();
      } else {
        setSendPhone((String)value);
      }
      break;

    case SEND_USERMAME:
      if (value == null) {
        unsetSendUsermame();
      } else {
        setSendUsermame((String)value);
      }
      break;

    case RECV_PHONE:
      if (value == null) {
        unsetRecvPhone();
      } else {
        setRecvPhone((String)value);
      }
      break;

    case RECV_USERNAME:
      if (value == null) {
        unsetRecvUsername();
      } else {
        setRecvUsername((String)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DOCID:
      return Long.valueOf(getDocid());

    case SEND_PHONE:
      return getSendPhone();

    case SEND_USERMAME:
      return getSendUsermame();

    case RECV_PHONE:
      return getRecvPhone();

    case RECV_USERNAME:
      return getRecvUsername();

    case MESSAGE:
      return getMessage();

    case TIMESTAMP:
      return getTimestamp();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DOCID:
      return isSetDocid();
    case SEND_PHONE:
      return isSetSendPhone();
    case SEND_USERMAME:
      return isSetSendUsermame();
    case RECV_PHONE:
      return isSetRecvPhone();
    case RECV_USERNAME:
      return isSetRecvUsername();
    case MESSAGE:
      return isSetMessage();
    case TIMESTAMP:
      return isSetTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OpenShortMessageContent)
      return this.equals((OpenShortMessageContent)that);
    return false;
  }

  public boolean equals(OpenShortMessageContent that) {
    if (that == null)
      return false;

    boolean this_present_docid = true;
    boolean that_present_docid = true;
    if (this_present_docid || that_present_docid) {
      if (!(this_present_docid && that_present_docid))
        return false;
      if (this.docid != that.docid)
        return false;
    }

    boolean this_present_sendPhone = true && this.isSetSendPhone();
    boolean that_present_sendPhone = true && that.isSetSendPhone();
    if (this_present_sendPhone || that_present_sendPhone) {
      if (!(this_present_sendPhone && that_present_sendPhone))
        return false;
      if (!this.sendPhone.equals(that.sendPhone))
        return false;
    }

    boolean this_present_sendUsermame = true && this.isSetSendUsermame();
    boolean that_present_sendUsermame = true && that.isSetSendUsermame();
    if (this_present_sendUsermame || that_present_sendUsermame) {
      if (!(this_present_sendUsermame && that_present_sendUsermame))
        return false;
      if (!this.sendUsermame.equals(that.sendUsermame))
        return false;
    }

    boolean this_present_recvPhone = true && this.isSetRecvPhone();
    boolean that_present_recvPhone = true && that.isSetRecvPhone();
    if (this_present_recvPhone || that_present_recvPhone) {
      if (!(this_present_recvPhone && that_present_recvPhone))
        return false;
      if (!this.recvPhone.equals(that.recvPhone))
        return false;
    }

    boolean this_present_recvUsername = true && this.isSetRecvUsername();
    boolean that_present_recvUsername = true && that.isSetRecvUsername();
    if (this_present_recvUsername || that_present_recvUsername) {
      if (!(this_present_recvUsername && that_present_recvUsername))
        return false;
      if (!this.recvUsername.equals(that.recvUsername))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_timestamp = true && this.isSetTimestamp();
    boolean that_present_timestamp = true && that.isSetTimestamp();
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (!this.timestamp.equals(that.timestamp))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(OpenShortMessageContent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    OpenShortMessageContent typedOther = (OpenShortMessageContent)other;

    lastComparison = Boolean.valueOf(isSetDocid()).compareTo(typedOther.isSetDocid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.docid, typedOther.docid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSendPhone()).compareTo(typedOther.isSetSendPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendPhone, typedOther.sendPhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSendUsermame()).compareTo(typedOther.isSetSendUsermame());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendUsermame()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendUsermame, typedOther.sendUsermame);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecvPhone()).compareTo(typedOther.isSetRecvPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecvPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recvPhone, typedOther.recvPhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecvUsername()).compareTo(typedOther.isSetRecvUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecvUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recvUsername, typedOther.recvUsername);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(typedOther.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, typedOther.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OpenShortMessageContent(");
    boolean first = true;

    sb.append("docid:");
    sb.append(this.docid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sendPhone:");
    if (this.sendPhone == null) {
      sb.append("null");
    } else {
      sb.append(this.sendPhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sendUsermame:");
    if (this.sendUsermame == null) {
      sb.append("null");
    } else {
      sb.append(this.sendUsermame);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recvPhone:");
    if (this.recvPhone == null) {
      sb.append("null");
    } else {
      sb.append(this.recvPhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recvUsername:");
    if (this.recvUsername == null) {
      sb.append("null");
    } else {
      sb.append(this.recvUsername);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    if (this.timestamp == null) {
      sb.append("null");
    } else {
      sb.append(this.timestamp);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'docid' because it's a primitive and you chose the non-beans generator.
    if (sendPhone == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sendPhone' was not present! Struct: " + toString());
    }
    if (sendUsermame == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sendUsermame' was not present! Struct: " + toString());
    }
    if (recvPhone == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'recvPhone' was not present! Struct: " + toString());
    }
    if (recvUsername == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'recvUsername' was not present! Struct: " + toString());
    }
    if (message == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'message' was not present! Struct: " + toString());
    }
    if (timestamp == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'timestamp' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OpenShortMessageContentStandardSchemeFactory implements SchemeFactory {
    public OpenShortMessageContentStandardScheme getScheme() {
      return new OpenShortMessageContentStandardScheme();
    }
  }

  private static class OpenShortMessageContentStandardScheme extends StandardScheme<OpenShortMessageContent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OpenShortMessageContent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DOCID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.docid = iprot.readI64();
              struct.setDocidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SEND_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sendPhone = iprot.readString();
              struct.setSendPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SEND_USERMAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sendUsermame = iprot.readString();
              struct.setSendUsermameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RECV_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recvPhone = iprot.readString();
              struct.setRecvPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RECV_USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recvUsername = iprot.readString();
              struct.setRecvUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.timestamp = iprot.readString();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetDocid()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'docid' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OpenShortMessageContent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DOCID_FIELD_DESC);
      oprot.writeI64(struct.docid);
      oprot.writeFieldEnd();
      if (struct.sendPhone != null) {
        oprot.writeFieldBegin(SEND_PHONE_FIELD_DESC);
        oprot.writeString(struct.sendPhone);
        oprot.writeFieldEnd();
      }
      if (struct.sendUsermame != null) {
        oprot.writeFieldBegin(SEND_USERMAME_FIELD_DESC);
        oprot.writeString(struct.sendUsermame);
        oprot.writeFieldEnd();
      }
      if (struct.recvPhone != null) {
        oprot.writeFieldBegin(RECV_PHONE_FIELD_DESC);
        oprot.writeString(struct.recvPhone);
        oprot.writeFieldEnd();
      }
      if (struct.recvUsername != null) {
        oprot.writeFieldBegin(RECV_USERNAME_FIELD_DESC);
        oprot.writeString(struct.recvUsername);
        oprot.writeFieldEnd();
      }
      if (struct.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeString(struct.message);
        oprot.writeFieldEnd();
      }
      if (struct.timestamp != null) {
        oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
        oprot.writeString(struct.timestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OpenShortMessageContentTupleSchemeFactory implements SchemeFactory {
    public OpenShortMessageContentTupleScheme getScheme() {
      return new OpenShortMessageContentTupleScheme();
    }
  }

  private static class OpenShortMessageContentTupleScheme extends TupleScheme<OpenShortMessageContent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OpenShortMessageContent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.docid);
      oprot.writeString(struct.sendPhone);
      oprot.writeString(struct.sendUsermame);
      oprot.writeString(struct.recvPhone);
      oprot.writeString(struct.recvUsername);
      oprot.writeString(struct.message);
      oprot.writeString(struct.timestamp);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OpenShortMessageContent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.docid = iprot.readI64();
      struct.setDocidIsSet(true);
      struct.sendPhone = iprot.readString();
      struct.setSendPhoneIsSet(true);
      struct.sendUsermame = iprot.readString();
      struct.setSendUsermameIsSet(true);
      struct.recvPhone = iprot.readString();
      struct.setRecvPhoneIsSet(true);
      struct.recvUsername = iprot.readString();
      struct.setRecvUsernameIsSet(true);
      struct.message = iprot.readString();
      struct.setMessageIsSet(true);
      struct.timestamp = iprot.readString();
      struct.setTimestampIsSet(true);
    }
  }

}

