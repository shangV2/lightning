/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qing.logiclayer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SmsSummary implements org.apache.thrift.TBase<SmsSummary, SmsSummary._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SmsSummary");

  private static final org.apache.thrift.protocol.TField SEND_MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("sendMobile", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SEND_USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sendUsername", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RECV_MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("recvMobile", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RECV_USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("recvUsername", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SmsSummaryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SmsSummaryTupleSchemeFactory());
  }

  public String sendMobile; // required
  public String sendUsername; // required
  public String recvMobile; // required
  public String recvUsername; // required
  public String content; // required
  public String timestamp; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SEND_MOBILE((short)1, "sendMobile"),
    SEND_USERNAME((short)2, "sendUsername"),
    RECV_MOBILE((short)3, "recvMobile"),
    RECV_USERNAME((short)4, "recvUsername"),
    CONTENT((short)5, "content"),
    TIMESTAMP((short)6, "timestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SEND_MOBILE
          return SEND_MOBILE;
        case 2: // SEND_USERNAME
          return SEND_USERNAME;
        case 3: // RECV_MOBILE
          return RECV_MOBILE;
        case 4: // RECV_USERNAME
          return RECV_USERNAME;
        case 5: // CONTENT
          return CONTENT;
        case 6: // TIMESTAMP
          return TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SEND_MOBILE, new org.apache.thrift.meta_data.FieldMetaData("sendMobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEND_USERNAME, new org.apache.thrift.meta_data.FieldMetaData("sendUsername", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECV_MOBILE, new org.apache.thrift.meta_data.FieldMetaData("recvMobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECV_USERNAME, new org.apache.thrift.meta_data.FieldMetaData("recvUsername", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SmsSummary.class, metaDataMap);
  }

  public SmsSummary() {
  }

  public SmsSummary(
    String sendMobile,
    String sendUsername,
    String recvMobile,
    String recvUsername,
    String content,
    String timestamp)
  {
    this();
    this.sendMobile = sendMobile;
    this.sendUsername = sendUsername;
    this.recvMobile = recvMobile;
    this.recvUsername = recvUsername;
    this.content = content;
    this.timestamp = timestamp;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SmsSummary(SmsSummary other) {
    if (other.isSetSendMobile()) {
      this.sendMobile = other.sendMobile;
    }
    if (other.isSetSendUsername()) {
      this.sendUsername = other.sendUsername;
    }
    if (other.isSetRecvMobile()) {
      this.recvMobile = other.recvMobile;
    }
    if (other.isSetRecvUsername()) {
      this.recvUsername = other.recvUsername;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetTimestamp()) {
      this.timestamp = other.timestamp;
    }
  }

  public SmsSummary deepCopy() {
    return new SmsSummary(this);
  }

  @Override
  public void clear() {
    this.sendMobile = null;
    this.sendUsername = null;
    this.recvMobile = null;
    this.recvUsername = null;
    this.content = null;
    this.timestamp = null;
  }

  public String getSendMobile() {
    return this.sendMobile;
  }

  public SmsSummary setSendMobile(String sendMobile) {
    this.sendMobile = sendMobile;
    return this;
  }

  public void unsetSendMobile() {
    this.sendMobile = null;
  }

  /** Returns true if field sendMobile is set (has been assigned a value) and false otherwise */
  public boolean isSetSendMobile() {
    return this.sendMobile != null;
  }

  public void setSendMobileIsSet(boolean value) {
    if (!value) {
      this.sendMobile = null;
    }
  }

  public String getSendUsername() {
    return this.sendUsername;
  }

  public SmsSummary setSendUsername(String sendUsername) {
    this.sendUsername = sendUsername;
    return this;
  }

  public void unsetSendUsername() {
    this.sendUsername = null;
  }

  /** Returns true if field sendUsername is set (has been assigned a value) and false otherwise */
  public boolean isSetSendUsername() {
    return this.sendUsername != null;
  }

  public void setSendUsernameIsSet(boolean value) {
    if (!value) {
      this.sendUsername = null;
    }
  }

  public String getRecvMobile() {
    return this.recvMobile;
  }

  public SmsSummary setRecvMobile(String recvMobile) {
    this.recvMobile = recvMobile;
    return this;
  }

  public void unsetRecvMobile() {
    this.recvMobile = null;
  }

  /** Returns true if field recvMobile is set (has been assigned a value) and false otherwise */
  public boolean isSetRecvMobile() {
    return this.recvMobile != null;
  }

  public void setRecvMobileIsSet(boolean value) {
    if (!value) {
      this.recvMobile = null;
    }
  }

  public String getRecvUsername() {
    return this.recvUsername;
  }

  public SmsSummary setRecvUsername(String recvUsername) {
    this.recvUsername = recvUsername;
    return this;
  }

  public void unsetRecvUsername() {
    this.recvUsername = null;
  }

  /** Returns true if field recvUsername is set (has been assigned a value) and false otherwise */
  public boolean isSetRecvUsername() {
    return this.recvUsername != null;
  }

  public void setRecvUsernameIsSet(boolean value) {
    if (!value) {
      this.recvUsername = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public SmsSummary setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public String getTimestamp() {
    return this.timestamp;
  }

  public SmsSummary setTimestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  public void unsetTimestamp() {
    this.timestamp = null;
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return this.timestamp != null;
  }

  public void setTimestampIsSet(boolean value) {
    if (!value) {
      this.timestamp = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SEND_MOBILE:
      if (value == null) {
        unsetSendMobile();
      } else {
        setSendMobile((String)value);
      }
      break;

    case SEND_USERNAME:
      if (value == null) {
        unsetSendUsername();
      } else {
        setSendUsername((String)value);
      }
      break;

    case RECV_MOBILE:
      if (value == null) {
        unsetRecvMobile();
      } else {
        setRecvMobile((String)value);
      }
      break;

    case RECV_USERNAME:
      if (value == null) {
        unsetRecvUsername();
      } else {
        setRecvUsername((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SEND_MOBILE:
      return getSendMobile();

    case SEND_USERNAME:
      return getSendUsername();

    case RECV_MOBILE:
      return getRecvMobile();

    case RECV_USERNAME:
      return getRecvUsername();

    case CONTENT:
      return getContent();

    case TIMESTAMP:
      return getTimestamp();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SEND_MOBILE:
      return isSetSendMobile();
    case SEND_USERNAME:
      return isSetSendUsername();
    case RECV_MOBILE:
      return isSetRecvMobile();
    case RECV_USERNAME:
      return isSetRecvUsername();
    case CONTENT:
      return isSetContent();
    case TIMESTAMP:
      return isSetTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SmsSummary)
      return this.equals((SmsSummary)that);
    return false;
  }

  public boolean equals(SmsSummary that) {
    if (that == null)
      return false;

    boolean this_present_sendMobile = true && this.isSetSendMobile();
    boolean that_present_sendMobile = true && that.isSetSendMobile();
    if (this_present_sendMobile || that_present_sendMobile) {
      if (!(this_present_sendMobile && that_present_sendMobile))
        return false;
      if (!this.sendMobile.equals(that.sendMobile))
        return false;
    }

    boolean this_present_sendUsername = true && this.isSetSendUsername();
    boolean that_present_sendUsername = true && that.isSetSendUsername();
    if (this_present_sendUsername || that_present_sendUsername) {
      if (!(this_present_sendUsername && that_present_sendUsername))
        return false;
      if (!this.sendUsername.equals(that.sendUsername))
        return false;
    }

    boolean this_present_recvMobile = true && this.isSetRecvMobile();
    boolean that_present_recvMobile = true && that.isSetRecvMobile();
    if (this_present_recvMobile || that_present_recvMobile) {
      if (!(this_present_recvMobile && that_present_recvMobile))
        return false;
      if (!this.recvMobile.equals(that.recvMobile))
        return false;
    }

    boolean this_present_recvUsername = true && this.isSetRecvUsername();
    boolean that_present_recvUsername = true && that.isSetRecvUsername();
    if (this_present_recvUsername || that_present_recvUsername) {
      if (!(this_present_recvUsername && that_present_recvUsername))
        return false;
      if (!this.recvUsername.equals(that.recvUsername))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_timestamp = true && this.isSetTimestamp();
    boolean that_present_timestamp = true && that.isSetTimestamp();
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (!this.timestamp.equals(that.timestamp))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SmsSummary other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SmsSummary typedOther = (SmsSummary)other;

    lastComparison = Boolean.valueOf(isSetSendMobile()).compareTo(typedOther.isSetSendMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendMobile, typedOther.sendMobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSendUsername()).compareTo(typedOther.isSetSendUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendUsername, typedOther.sendUsername);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecvMobile()).compareTo(typedOther.isSetRecvMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecvMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recvMobile, typedOther.recvMobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecvUsername()).compareTo(typedOther.isSetRecvUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecvUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recvUsername, typedOther.recvUsername);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SmsSummary(");
    boolean first = true;

    sb.append("sendMobile:");
    if (this.sendMobile == null) {
      sb.append("null");
    } else {
      sb.append(this.sendMobile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sendUsername:");
    if (this.sendUsername == null) {
      sb.append("null");
    } else {
      sb.append(this.sendUsername);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recvMobile:");
    if (this.recvMobile == null) {
      sb.append("null");
    } else {
      sb.append(this.recvMobile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recvUsername:");
    if (this.recvUsername == null) {
      sb.append("null");
    } else {
      sb.append(this.recvUsername);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    if (this.timestamp == null) {
      sb.append("null");
    } else {
      sb.append(this.timestamp);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SmsSummaryStandardSchemeFactory implements SchemeFactory {
    public SmsSummaryStandardScheme getScheme() {
      return new SmsSummaryStandardScheme();
    }
  }

  private static class SmsSummaryStandardScheme extends StandardScheme<SmsSummary> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SmsSummary struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SEND_MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sendMobile = iprot.readString();
              struct.setSendMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SEND_USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sendUsername = iprot.readString();
              struct.setSendUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RECV_MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recvMobile = iprot.readString();
              struct.setRecvMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RECV_USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recvUsername = iprot.readString();
              struct.setRecvUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.timestamp = iprot.readString();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SmsSummary struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sendMobile != null) {
        oprot.writeFieldBegin(SEND_MOBILE_FIELD_DESC);
        oprot.writeString(struct.sendMobile);
        oprot.writeFieldEnd();
      }
      if (struct.sendUsername != null) {
        oprot.writeFieldBegin(SEND_USERNAME_FIELD_DESC);
        oprot.writeString(struct.sendUsername);
        oprot.writeFieldEnd();
      }
      if (struct.recvMobile != null) {
        oprot.writeFieldBegin(RECV_MOBILE_FIELD_DESC);
        oprot.writeString(struct.recvMobile);
        oprot.writeFieldEnd();
      }
      if (struct.recvUsername != null) {
        oprot.writeFieldBegin(RECV_USERNAME_FIELD_DESC);
        oprot.writeString(struct.recvUsername);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      if (struct.timestamp != null) {
        oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
        oprot.writeString(struct.timestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SmsSummaryTupleSchemeFactory implements SchemeFactory {
    public SmsSummaryTupleScheme getScheme() {
      return new SmsSummaryTupleScheme();
    }
  }

  private static class SmsSummaryTupleScheme extends TupleScheme<SmsSummary> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SmsSummary struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSendMobile()) {
        optionals.set(0);
      }
      if (struct.isSetSendUsername()) {
        optionals.set(1);
      }
      if (struct.isSetRecvMobile()) {
        optionals.set(2);
      }
      if (struct.isSetRecvUsername()) {
        optionals.set(3);
      }
      if (struct.isSetContent()) {
        optionals.set(4);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetSendMobile()) {
        oprot.writeString(struct.sendMobile);
      }
      if (struct.isSetSendUsername()) {
        oprot.writeString(struct.sendUsername);
      }
      if (struct.isSetRecvMobile()) {
        oprot.writeString(struct.recvMobile);
      }
      if (struct.isSetRecvUsername()) {
        oprot.writeString(struct.recvUsername);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeString(struct.timestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SmsSummary struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.sendMobile = iprot.readString();
        struct.setSendMobileIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sendUsername = iprot.readString();
        struct.setSendUsernameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.recvMobile = iprot.readString();
        struct.setRecvMobileIsSet(true);
      }
      if (incoming.get(3)) {
        struct.recvUsername = iprot.readString();
        struct.setRecvUsernameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(5)) {
        struct.timestamp = iprot.readString();
        struct.setTimestampIsSet(true);
      }
    }
  }

}

