/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qing.logiclayer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SearchSummaryResult implements org.apache.thrift.TBase<SearchSummaryResult, SearchSummaryResult._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SearchSummaryResult");

  private static final org.apache.thrift.protocol.TField SUMMARIES_FIELD_DESC = new org.apache.thrift.protocol.TField("summaries", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("total", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SearchSummaryResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SearchSummaryResultTupleSchemeFactory());
  }

  public List<SearchSummary> summaries; // required
  public int total; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUMMARIES((short)1, "summaries"),
    TOTAL((short)2, "total");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUMMARIES
          return SUMMARIES;
        case 2: // TOTAL
          return TOTAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTAL_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUMMARIES, new org.apache.thrift.meta_data.FieldMetaData("summaries", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SearchSummary.class))));
    tmpMap.put(_Fields.TOTAL, new org.apache.thrift.meta_data.FieldMetaData("total", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SearchSummaryResult.class, metaDataMap);
  }

  public SearchSummaryResult() {
  }

  public SearchSummaryResult(
    List<SearchSummary> summaries,
    int total)
  {
    this();
    this.summaries = summaries;
    this.total = total;
    setTotalIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SearchSummaryResult(SearchSummaryResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSummaries()) {
      List<SearchSummary> __this__summaries = new ArrayList<SearchSummary>();
      for (SearchSummary other_element : other.summaries) {
        __this__summaries.add(new SearchSummary(other_element));
      }
      this.summaries = __this__summaries;
    }
    this.total = other.total;
  }

  public SearchSummaryResult deepCopy() {
    return new SearchSummaryResult(this);
  }

  @Override
  public void clear() {
    this.summaries = null;
    setTotalIsSet(false);
    this.total = 0;
  }

  public int getSummariesSize() {
    return (this.summaries == null) ? 0 : this.summaries.size();
  }

  public java.util.Iterator<SearchSummary> getSummariesIterator() {
    return (this.summaries == null) ? null : this.summaries.iterator();
  }

  public void addToSummaries(SearchSummary elem) {
    if (this.summaries == null) {
      this.summaries = new ArrayList<SearchSummary>();
    }
    this.summaries.add(elem);
  }

  public List<SearchSummary> getSummaries() {
    return this.summaries;
  }

  public SearchSummaryResult setSummaries(List<SearchSummary> summaries) {
    this.summaries = summaries;
    return this;
  }

  public void unsetSummaries() {
    this.summaries = null;
  }

  /** Returns true if field summaries is set (has been assigned a value) and false otherwise */
  public boolean isSetSummaries() {
    return this.summaries != null;
  }

  public void setSummariesIsSet(boolean value) {
    if (!value) {
      this.summaries = null;
    }
  }

  public int getTotal() {
    return this.total;
  }

  public SearchSummaryResult setTotal(int total) {
    this.total = total;
    setTotalIsSet(true);
    return this;
  }

  public void unsetTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  /** Returns true if field total is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  public void setTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTAL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUMMARIES:
      if (value == null) {
        unsetSummaries();
      } else {
        setSummaries((List<SearchSummary>)value);
      }
      break;

    case TOTAL:
      if (value == null) {
        unsetTotal();
      } else {
        setTotal((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUMMARIES:
      return getSummaries();

    case TOTAL:
      return Integer.valueOf(getTotal());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUMMARIES:
      return isSetSummaries();
    case TOTAL:
      return isSetTotal();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SearchSummaryResult)
      return this.equals((SearchSummaryResult)that);
    return false;
  }

  public boolean equals(SearchSummaryResult that) {
    if (that == null)
      return false;

    boolean this_present_summaries = true && this.isSetSummaries();
    boolean that_present_summaries = true && that.isSetSummaries();
    if (this_present_summaries || that_present_summaries) {
      if (!(this_present_summaries && that_present_summaries))
        return false;
      if (!this.summaries.equals(that.summaries))
        return false;
    }

    boolean this_present_total = true;
    boolean that_present_total = true;
    if (this_present_total || that_present_total) {
      if (!(this_present_total && that_present_total))
        return false;
      if (this.total != that.total)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SearchSummaryResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SearchSummaryResult typedOther = (SearchSummaryResult)other;

    lastComparison = Boolean.valueOf(isSetSummaries()).compareTo(typedOther.isSetSummaries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSummaries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.summaries, typedOther.summaries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal()).compareTo(typedOther.isSetTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total, typedOther.total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SearchSummaryResult(");
    boolean first = true;

    sb.append("summaries:");
    if (this.summaries == null) {
      sb.append("null");
    } else {
      sb.append(this.summaries);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("total:");
    sb.append(this.total);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SearchSummaryResultStandardSchemeFactory implements SchemeFactory {
    public SearchSummaryResultStandardScheme getScheme() {
      return new SearchSummaryResultStandardScheme();
    }
  }

  private static class SearchSummaryResultStandardScheme extends StandardScheme<SearchSummaryResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SearchSummaryResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUMMARIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.summaries = new ArrayList<SearchSummary>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  SearchSummary _elem10; // required
                  _elem10 = new SearchSummary();
                  _elem10.read(iprot);
                  struct.summaries.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setSummariesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.total = iprot.readI32();
              struct.setTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SearchSummaryResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.summaries != null) {
        oprot.writeFieldBegin(SUMMARIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.summaries.size()));
          for (SearchSummary _iter11 : struct.summaries)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_FIELD_DESC);
      oprot.writeI32(struct.total);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SearchSummaryResultTupleSchemeFactory implements SchemeFactory {
    public SearchSummaryResultTupleScheme getScheme() {
      return new SearchSummaryResultTupleScheme();
    }
  }

  private static class SearchSummaryResultTupleScheme extends TupleScheme<SearchSummaryResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SearchSummaryResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSummaries()) {
        optionals.set(0);
      }
      if (struct.isSetTotal()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetSummaries()) {
        {
          oprot.writeI32(struct.summaries.size());
          for (SearchSummary _iter12 : struct.summaries)
          {
            _iter12.write(oprot);
          }
        }
      }
      if (struct.isSetTotal()) {
        oprot.writeI32(struct.total);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SearchSummaryResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.summaries = new ArrayList<SearchSummary>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            SearchSummary _elem15; // required
            _elem15 = new SearchSummary();
            _elem15.read(iprot);
            struct.summaries.add(_elem15);
          }
        }
        struct.setSummariesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.total = iprot.readI32();
        struct.setTotalIsSet(true);
      }
    }
  }

}

