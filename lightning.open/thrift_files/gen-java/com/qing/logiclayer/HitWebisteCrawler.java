/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qing.logiclayer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HitWebisteCrawler implements org.apache.thrift.TBase<HitWebisteCrawler, HitWebisteCrawler._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HitWebisteCrawler");

  private static final org.apache.thrift.protocol.TField LANGUGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("langugeType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField WEBSITE_FIELD_DESC = new org.apache.thrift.protocol.TField("website", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SEED_URLS_FIELD_DESC = new org.apache.thrift.protocol.TField("seedUrls", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField CRAWLER_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("crawlerNum", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField HOST_URL_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("hostUrlExp", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NAVIGATION_URL_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("navigationUrlExp", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CONTENT_URL_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("contentUrlExp", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TITLE_CONTENT_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("titleContentExp", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CONTENT_CONTENT_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("contentContentExp", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField TIME_CONTENT_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("timeContentExp", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField WEBID_FIELD_DESC = new org.apache.thrift.protocol.TField("webid", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HitWebisteCrawlerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HitWebisteCrawlerTupleSchemeFactory());
  }

  /**
   * 
   * @see OpenCommonLanguge
   */
  public OpenCommonLanguge langugeType; // optional
  public String website; // required
  public List<String> seedUrls; // required
  public int crawlerNum; // required
  public String hostUrlExp; // required
  public String navigationUrlExp; // required
  public String contentUrlExp; // required
  public String titleContentExp; // required
  public String contentContentExp; // required
  public String timeContentExp; // required
  public int webid; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see OpenCommonLanguge
     */
    LANGUGE_TYPE((short)1, "langugeType"),
    WEBSITE((short)2, "website"),
    SEED_URLS((short)3, "seedUrls"),
    CRAWLER_NUM((short)4, "crawlerNum"),
    HOST_URL_EXP((short)5, "hostUrlExp"),
    NAVIGATION_URL_EXP((short)6, "navigationUrlExp"),
    CONTENT_URL_EXP((short)7, "contentUrlExp"),
    TITLE_CONTENT_EXP((short)8, "titleContentExp"),
    CONTENT_CONTENT_EXP((short)9, "contentContentExp"),
    TIME_CONTENT_EXP((short)10, "timeContentExp"),
    WEBID((short)11, "webid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LANGUGE_TYPE
          return LANGUGE_TYPE;
        case 2: // WEBSITE
          return WEBSITE;
        case 3: // SEED_URLS
          return SEED_URLS;
        case 4: // CRAWLER_NUM
          return CRAWLER_NUM;
        case 5: // HOST_URL_EXP
          return HOST_URL_EXP;
        case 6: // NAVIGATION_URL_EXP
          return NAVIGATION_URL_EXP;
        case 7: // CONTENT_URL_EXP
          return CONTENT_URL_EXP;
        case 8: // TITLE_CONTENT_EXP
          return TITLE_CONTENT_EXP;
        case 9: // CONTENT_CONTENT_EXP
          return CONTENT_CONTENT_EXP;
        case 10: // TIME_CONTENT_EXP
          return TIME_CONTENT_EXP;
        case 11: // WEBID
          return WEBID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CRAWLERNUM_ISSET_ID = 0;
  private static final int __WEBID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.LANGUGE_TYPE,_Fields.WEBID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LANGUGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("langugeType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OpenCommonLanguge.class)));
    tmpMap.put(_Fields.WEBSITE, new org.apache.thrift.meta_data.FieldMetaData("website", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEED_URLS, new org.apache.thrift.meta_data.FieldMetaData("seedUrls", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CRAWLER_NUM, new org.apache.thrift.meta_data.FieldMetaData("crawlerNum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HOST_URL_EXP, new org.apache.thrift.meta_data.FieldMetaData("hostUrlExp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAVIGATION_URL_EXP, new org.apache.thrift.meta_data.FieldMetaData("navigationUrlExp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT_URL_EXP, new org.apache.thrift.meta_data.FieldMetaData("contentUrlExp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE_CONTENT_EXP, new org.apache.thrift.meta_data.FieldMetaData("titleContentExp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT_CONTENT_EXP, new org.apache.thrift.meta_data.FieldMetaData("contentContentExp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME_CONTENT_EXP, new org.apache.thrift.meta_data.FieldMetaData("timeContentExp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WEBID, new org.apache.thrift.meta_data.FieldMetaData("webid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HitWebisteCrawler.class, metaDataMap);
  }

  public HitWebisteCrawler() {
    this.langugeType = com.qing.logiclayer.OpenCommonLanguge.OC_LAN_CHINESE_ZH_CN;

  }

  public HitWebisteCrawler(
    String website,
    List<String> seedUrls,
    int crawlerNum,
    String hostUrlExp,
    String navigationUrlExp,
    String contentUrlExp,
    String titleContentExp,
    String contentContentExp,
    String timeContentExp)
  {
    this();
    this.website = website;
    this.seedUrls = seedUrls;
    this.crawlerNum = crawlerNum;
    setCrawlerNumIsSet(true);
    this.hostUrlExp = hostUrlExp;
    this.navigationUrlExp = navigationUrlExp;
    this.contentUrlExp = contentUrlExp;
    this.titleContentExp = titleContentExp;
    this.contentContentExp = contentContentExp;
    this.timeContentExp = timeContentExp;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HitWebisteCrawler(HitWebisteCrawler other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetLangugeType()) {
      this.langugeType = other.langugeType;
    }
    if (other.isSetWebsite()) {
      this.website = other.website;
    }
    if (other.isSetSeedUrls()) {
      List<String> __this__seedUrls = new ArrayList<String>();
      for (String other_element : other.seedUrls) {
        __this__seedUrls.add(other_element);
      }
      this.seedUrls = __this__seedUrls;
    }
    this.crawlerNum = other.crawlerNum;
    if (other.isSetHostUrlExp()) {
      this.hostUrlExp = other.hostUrlExp;
    }
    if (other.isSetNavigationUrlExp()) {
      this.navigationUrlExp = other.navigationUrlExp;
    }
    if (other.isSetContentUrlExp()) {
      this.contentUrlExp = other.contentUrlExp;
    }
    if (other.isSetTitleContentExp()) {
      this.titleContentExp = other.titleContentExp;
    }
    if (other.isSetContentContentExp()) {
      this.contentContentExp = other.contentContentExp;
    }
    if (other.isSetTimeContentExp()) {
      this.timeContentExp = other.timeContentExp;
    }
    this.webid = other.webid;
  }

  public HitWebisteCrawler deepCopy() {
    return new HitWebisteCrawler(this);
  }

  @Override
  public void clear() {
    this.langugeType = com.qing.logiclayer.OpenCommonLanguge.OC_LAN_CHINESE_ZH_CN;

    this.website = null;
    this.seedUrls = null;
    setCrawlerNumIsSet(false);
    this.crawlerNum = 0;
    this.hostUrlExp = null;
    this.navigationUrlExp = null;
    this.contentUrlExp = null;
    this.titleContentExp = null;
    this.contentContentExp = null;
    this.timeContentExp = null;
    setWebidIsSet(false);
    this.webid = 0;
  }

  /**
   * 
   * @see OpenCommonLanguge
   */
  public OpenCommonLanguge getLangugeType() {
    return this.langugeType;
  }

  /**
   * 
   * @see OpenCommonLanguge
   */
  public HitWebisteCrawler setLangugeType(OpenCommonLanguge langugeType) {
    this.langugeType = langugeType;
    return this;
  }

  public void unsetLangugeType() {
    this.langugeType = null;
  }

  /** Returns true if field langugeType is set (has been assigned a value) and false otherwise */
  public boolean isSetLangugeType() {
    return this.langugeType != null;
  }

  public void setLangugeTypeIsSet(boolean value) {
    if (!value) {
      this.langugeType = null;
    }
  }

  public String getWebsite() {
    return this.website;
  }

  public HitWebisteCrawler setWebsite(String website) {
    this.website = website;
    return this;
  }

  public void unsetWebsite() {
    this.website = null;
  }

  /** Returns true if field website is set (has been assigned a value) and false otherwise */
  public boolean isSetWebsite() {
    return this.website != null;
  }

  public void setWebsiteIsSet(boolean value) {
    if (!value) {
      this.website = null;
    }
  }

  public int getSeedUrlsSize() {
    return (this.seedUrls == null) ? 0 : this.seedUrls.size();
  }

  public java.util.Iterator<String> getSeedUrlsIterator() {
    return (this.seedUrls == null) ? null : this.seedUrls.iterator();
  }

  public void addToSeedUrls(String elem) {
    if (this.seedUrls == null) {
      this.seedUrls = new ArrayList<String>();
    }
    this.seedUrls.add(elem);
  }

  public List<String> getSeedUrls() {
    return this.seedUrls;
  }

  public HitWebisteCrawler setSeedUrls(List<String> seedUrls) {
    this.seedUrls = seedUrls;
    return this;
  }

  public void unsetSeedUrls() {
    this.seedUrls = null;
  }

  /** Returns true if field seedUrls is set (has been assigned a value) and false otherwise */
  public boolean isSetSeedUrls() {
    return this.seedUrls != null;
  }

  public void setSeedUrlsIsSet(boolean value) {
    if (!value) {
      this.seedUrls = null;
    }
  }

  public int getCrawlerNum() {
    return this.crawlerNum;
  }

  public HitWebisteCrawler setCrawlerNum(int crawlerNum) {
    this.crawlerNum = crawlerNum;
    setCrawlerNumIsSet(true);
    return this;
  }

  public void unsetCrawlerNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CRAWLERNUM_ISSET_ID);
  }

  /** Returns true if field crawlerNum is set (has been assigned a value) and false otherwise */
  public boolean isSetCrawlerNum() {
    return EncodingUtils.testBit(__isset_bitfield, __CRAWLERNUM_ISSET_ID);
  }

  public void setCrawlerNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CRAWLERNUM_ISSET_ID, value);
  }

  public String getHostUrlExp() {
    return this.hostUrlExp;
  }

  public HitWebisteCrawler setHostUrlExp(String hostUrlExp) {
    this.hostUrlExp = hostUrlExp;
    return this;
  }

  public void unsetHostUrlExp() {
    this.hostUrlExp = null;
  }

  /** Returns true if field hostUrlExp is set (has been assigned a value) and false otherwise */
  public boolean isSetHostUrlExp() {
    return this.hostUrlExp != null;
  }

  public void setHostUrlExpIsSet(boolean value) {
    if (!value) {
      this.hostUrlExp = null;
    }
  }

  public String getNavigationUrlExp() {
    return this.navigationUrlExp;
  }

  public HitWebisteCrawler setNavigationUrlExp(String navigationUrlExp) {
    this.navigationUrlExp = navigationUrlExp;
    return this;
  }

  public void unsetNavigationUrlExp() {
    this.navigationUrlExp = null;
  }

  /** Returns true if field navigationUrlExp is set (has been assigned a value) and false otherwise */
  public boolean isSetNavigationUrlExp() {
    return this.navigationUrlExp != null;
  }

  public void setNavigationUrlExpIsSet(boolean value) {
    if (!value) {
      this.navigationUrlExp = null;
    }
  }

  public String getContentUrlExp() {
    return this.contentUrlExp;
  }

  public HitWebisteCrawler setContentUrlExp(String contentUrlExp) {
    this.contentUrlExp = contentUrlExp;
    return this;
  }

  public void unsetContentUrlExp() {
    this.contentUrlExp = null;
  }

  /** Returns true if field contentUrlExp is set (has been assigned a value) and false otherwise */
  public boolean isSetContentUrlExp() {
    return this.contentUrlExp != null;
  }

  public void setContentUrlExpIsSet(boolean value) {
    if (!value) {
      this.contentUrlExp = null;
    }
  }

  public String getTitleContentExp() {
    return this.titleContentExp;
  }

  public HitWebisteCrawler setTitleContentExp(String titleContentExp) {
    this.titleContentExp = titleContentExp;
    return this;
  }

  public void unsetTitleContentExp() {
    this.titleContentExp = null;
  }

  /** Returns true if field titleContentExp is set (has been assigned a value) and false otherwise */
  public boolean isSetTitleContentExp() {
    return this.titleContentExp != null;
  }

  public void setTitleContentExpIsSet(boolean value) {
    if (!value) {
      this.titleContentExp = null;
    }
  }

  public String getContentContentExp() {
    return this.contentContentExp;
  }

  public HitWebisteCrawler setContentContentExp(String contentContentExp) {
    this.contentContentExp = contentContentExp;
    return this;
  }

  public void unsetContentContentExp() {
    this.contentContentExp = null;
  }

  /** Returns true if field contentContentExp is set (has been assigned a value) and false otherwise */
  public boolean isSetContentContentExp() {
    return this.contentContentExp != null;
  }

  public void setContentContentExpIsSet(boolean value) {
    if (!value) {
      this.contentContentExp = null;
    }
  }

  public String getTimeContentExp() {
    return this.timeContentExp;
  }

  public HitWebisteCrawler setTimeContentExp(String timeContentExp) {
    this.timeContentExp = timeContentExp;
    return this;
  }

  public void unsetTimeContentExp() {
    this.timeContentExp = null;
  }

  /** Returns true if field timeContentExp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeContentExp() {
    return this.timeContentExp != null;
  }

  public void setTimeContentExpIsSet(boolean value) {
    if (!value) {
      this.timeContentExp = null;
    }
  }

  public int getWebid() {
    return this.webid;
  }

  public HitWebisteCrawler setWebid(int webid) {
    this.webid = webid;
    setWebidIsSet(true);
    return this;
  }

  public void unsetWebid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEBID_ISSET_ID);
  }

  /** Returns true if field webid is set (has been assigned a value) and false otherwise */
  public boolean isSetWebid() {
    return EncodingUtils.testBit(__isset_bitfield, __WEBID_ISSET_ID);
  }

  public void setWebidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEBID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LANGUGE_TYPE:
      if (value == null) {
        unsetLangugeType();
      } else {
        setLangugeType((OpenCommonLanguge)value);
      }
      break;

    case WEBSITE:
      if (value == null) {
        unsetWebsite();
      } else {
        setWebsite((String)value);
      }
      break;

    case SEED_URLS:
      if (value == null) {
        unsetSeedUrls();
      } else {
        setSeedUrls((List<String>)value);
      }
      break;

    case CRAWLER_NUM:
      if (value == null) {
        unsetCrawlerNum();
      } else {
        setCrawlerNum((Integer)value);
      }
      break;

    case HOST_URL_EXP:
      if (value == null) {
        unsetHostUrlExp();
      } else {
        setHostUrlExp((String)value);
      }
      break;

    case NAVIGATION_URL_EXP:
      if (value == null) {
        unsetNavigationUrlExp();
      } else {
        setNavigationUrlExp((String)value);
      }
      break;

    case CONTENT_URL_EXP:
      if (value == null) {
        unsetContentUrlExp();
      } else {
        setContentUrlExp((String)value);
      }
      break;

    case TITLE_CONTENT_EXP:
      if (value == null) {
        unsetTitleContentExp();
      } else {
        setTitleContentExp((String)value);
      }
      break;

    case CONTENT_CONTENT_EXP:
      if (value == null) {
        unsetContentContentExp();
      } else {
        setContentContentExp((String)value);
      }
      break;

    case TIME_CONTENT_EXP:
      if (value == null) {
        unsetTimeContentExp();
      } else {
        setTimeContentExp((String)value);
      }
      break;

    case WEBID:
      if (value == null) {
        unsetWebid();
      } else {
        setWebid((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LANGUGE_TYPE:
      return getLangugeType();

    case WEBSITE:
      return getWebsite();

    case SEED_URLS:
      return getSeedUrls();

    case CRAWLER_NUM:
      return Integer.valueOf(getCrawlerNum());

    case HOST_URL_EXP:
      return getHostUrlExp();

    case NAVIGATION_URL_EXP:
      return getNavigationUrlExp();

    case CONTENT_URL_EXP:
      return getContentUrlExp();

    case TITLE_CONTENT_EXP:
      return getTitleContentExp();

    case CONTENT_CONTENT_EXP:
      return getContentContentExp();

    case TIME_CONTENT_EXP:
      return getTimeContentExp();

    case WEBID:
      return Integer.valueOf(getWebid());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LANGUGE_TYPE:
      return isSetLangugeType();
    case WEBSITE:
      return isSetWebsite();
    case SEED_URLS:
      return isSetSeedUrls();
    case CRAWLER_NUM:
      return isSetCrawlerNum();
    case HOST_URL_EXP:
      return isSetHostUrlExp();
    case NAVIGATION_URL_EXP:
      return isSetNavigationUrlExp();
    case CONTENT_URL_EXP:
      return isSetContentUrlExp();
    case TITLE_CONTENT_EXP:
      return isSetTitleContentExp();
    case CONTENT_CONTENT_EXP:
      return isSetContentContentExp();
    case TIME_CONTENT_EXP:
      return isSetTimeContentExp();
    case WEBID:
      return isSetWebid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HitWebisteCrawler)
      return this.equals((HitWebisteCrawler)that);
    return false;
  }

  public boolean equals(HitWebisteCrawler that) {
    if (that == null)
      return false;

    boolean this_present_langugeType = true && this.isSetLangugeType();
    boolean that_present_langugeType = true && that.isSetLangugeType();
    if (this_present_langugeType || that_present_langugeType) {
      if (!(this_present_langugeType && that_present_langugeType))
        return false;
      if (!this.langugeType.equals(that.langugeType))
        return false;
    }

    boolean this_present_website = true && this.isSetWebsite();
    boolean that_present_website = true && that.isSetWebsite();
    if (this_present_website || that_present_website) {
      if (!(this_present_website && that_present_website))
        return false;
      if (!this.website.equals(that.website))
        return false;
    }

    boolean this_present_seedUrls = true && this.isSetSeedUrls();
    boolean that_present_seedUrls = true && that.isSetSeedUrls();
    if (this_present_seedUrls || that_present_seedUrls) {
      if (!(this_present_seedUrls && that_present_seedUrls))
        return false;
      if (!this.seedUrls.equals(that.seedUrls))
        return false;
    }

    boolean this_present_crawlerNum = true;
    boolean that_present_crawlerNum = true;
    if (this_present_crawlerNum || that_present_crawlerNum) {
      if (!(this_present_crawlerNum && that_present_crawlerNum))
        return false;
      if (this.crawlerNum != that.crawlerNum)
        return false;
    }

    boolean this_present_hostUrlExp = true && this.isSetHostUrlExp();
    boolean that_present_hostUrlExp = true && that.isSetHostUrlExp();
    if (this_present_hostUrlExp || that_present_hostUrlExp) {
      if (!(this_present_hostUrlExp && that_present_hostUrlExp))
        return false;
      if (!this.hostUrlExp.equals(that.hostUrlExp))
        return false;
    }

    boolean this_present_navigationUrlExp = true && this.isSetNavigationUrlExp();
    boolean that_present_navigationUrlExp = true && that.isSetNavigationUrlExp();
    if (this_present_navigationUrlExp || that_present_navigationUrlExp) {
      if (!(this_present_navigationUrlExp && that_present_navigationUrlExp))
        return false;
      if (!this.navigationUrlExp.equals(that.navigationUrlExp))
        return false;
    }

    boolean this_present_contentUrlExp = true && this.isSetContentUrlExp();
    boolean that_present_contentUrlExp = true && that.isSetContentUrlExp();
    if (this_present_contentUrlExp || that_present_contentUrlExp) {
      if (!(this_present_contentUrlExp && that_present_contentUrlExp))
        return false;
      if (!this.contentUrlExp.equals(that.contentUrlExp))
        return false;
    }

    boolean this_present_titleContentExp = true && this.isSetTitleContentExp();
    boolean that_present_titleContentExp = true && that.isSetTitleContentExp();
    if (this_present_titleContentExp || that_present_titleContentExp) {
      if (!(this_present_titleContentExp && that_present_titleContentExp))
        return false;
      if (!this.titleContentExp.equals(that.titleContentExp))
        return false;
    }

    boolean this_present_contentContentExp = true && this.isSetContentContentExp();
    boolean that_present_contentContentExp = true && that.isSetContentContentExp();
    if (this_present_contentContentExp || that_present_contentContentExp) {
      if (!(this_present_contentContentExp && that_present_contentContentExp))
        return false;
      if (!this.contentContentExp.equals(that.contentContentExp))
        return false;
    }

    boolean this_present_timeContentExp = true && this.isSetTimeContentExp();
    boolean that_present_timeContentExp = true && that.isSetTimeContentExp();
    if (this_present_timeContentExp || that_present_timeContentExp) {
      if (!(this_present_timeContentExp && that_present_timeContentExp))
        return false;
      if (!this.timeContentExp.equals(that.timeContentExp))
        return false;
    }

    boolean this_present_webid = true && this.isSetWebid();
    boolean that_present_webid = true && that.isSetWebid();
    if (this_present_webid || that_present_webid) {
      if (!(this_present_webid && that_present_webid))
        return false;
      if (this.webid != that.webid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(HitWebisteCrawler other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    HitWebisteCrawler typedOther = (HitWebisteCrawler)other;

    lastComparison = Boolean.valueOf(isSetLangugeType()).compareTo(typedOther.isSetLangugeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLangugeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.langugeType, typedOther.langugeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWebsite()).compareTo(typedOther.isSetWebsite());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWebsite()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.website, typedOther.website);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeedUrls()).compareTo(typedOther.isSetSeedUrls());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeedUrls()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seedUrls, typedOther.seedUrls);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCrawlerNum()).compareTo(typedOther.isSetCrawlerNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCrawlerNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crawlerNum, typedOther.crawlerNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostUrlExp()).compareTo(typedOther.isSetHostUrlExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostUrlExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostUrlExp, typedOther.hostUrlExp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNavigationUrlExp()).compareTo(typedOther.isSetNavigationUrlExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNavigationUrlExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.navigationUrlExp, typedOther.navigationUrlExp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentUrlExp()).compareTo(typedOther.isSetContentUrlExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentUrlExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentUrlExp, typedOther.contentUrlExp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitleContentExp()).compareTo(typedOther.isSetTitleContentExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitleContentExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.titleContentExp, typedOther.titleContentExp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentContentExp()).compareTo(typedOther.isSetContentContentExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentContentExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentContentExp, typedOther.contentContentExp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeContentExp()).compareTo(typedOther.isSetTimeContentExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeContentExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeContentExp, typedOther.timeContentExp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWebid()).compareTo(typedOther.isSetWebid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWebid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.webid, typedOther.webid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HitWebisteCrawler(");
    boolean first = true;

    if (isSetLangugeType()) {
      sb.append("langugeType:");
      if (this.langugeType == null) {
        sb.append("null");
      } else {
        sb.append(this.langugeType);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("website:");
    if (this.website == null) {
      sb.append("null");
    } else {
      sb.append(this.website);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("seedUrls:");
    if (this.seedUrls == null) {
      sb.append("null");
    } else {
      sb.append(this.seedUrls);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("crawlerNum:");
    sb.append(this.crawlerNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hostUrlExp:");
    if (this.hostUrlExp == null) {
      sb.append("null");
    } else {
      sb.append(this.hostUrlExp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("navigationUrlExp:");
    if (this.navigationUrlExp == null) {
      sb.append("null");
    } else {
      sb.append(this.navigationUrlExp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contentUrlExp:");
    if (this.contentUrlExp == null) {
      sb.append("null");
    } else {
      sb.append(this.contentUrlExp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("titleContentExp:");
    if (this.titleContentExp == null) {
      sb.append("null");
    } else {
      sb.append(this.titleContentExp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contentContentExp:");
    if (this.contentContentExp == null) {
      sb.append("null");
    } else {
      sb.append(this.contentContentExp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeContentExp:");
    if (this.timeContentExp == null) {
      sb.append("null");
    } else {
      sb.append(this.timeContentExp);
    }
    first = false;
    if (isSetWebid()) {
      if (!first) sb.append(", ");
      sb.append("webid:");
      sb.append(this.webid);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (website == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'website' was not present! Struct: " + toString());
    }
    if (seedUrls == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'seedUrls' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'crawlerNum' because it's a primitive and you chose the non-beans generator.
    if (hostUrlExp == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'hostUrlExp' was not present! Struct: " + toString());
    }
    if (navigationUrlExp == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'navigationUrlExp' was not present! Struct: " + toString());
    }
    if (contentUrlExp == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'contentUrlExp' was not present! Struct: " + toString());
    }
    if (titleContentExp == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'titleContentExp' was not present! Struct: " + toString());
    }
    if (contentContentExp == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'contentContentExp' was not present! Struct: " + toString());
    }
    if (timeContentExp == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'timeContentExp' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HitWebisteCrawlerStandardSchemeFactory implements SchemeFactory {
    public HitWebisteCrawlerStandardScheme getScheme() {
      return new HitWebisteCrawlerStandardScheme();
    }
  }

  private static class HitWebisteCrawlerStandardScheme extends StandardScheme<HitWebisteCrawler> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HitWebisteCrawler struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LANGUGE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.langugeType = OpenCommonLanguge.findByValue(iprot.readI32());
              struct.setLangugeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WEBSITE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.website = iprot.readString();
              struct.setWebsiteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SEED_URLS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list184 = iprot.readListBegin();
                struct.seedUrls = new ArrayList<String>(_list184.size);
                for (int _i185 = 0; _i185 < _list184.size; ++_i185)
                {
                  String _elem186; // required
                  _elem186 = iprot.readString();
                  struct.seedUrls.add(_elem186);
                }
                iprot.readListEnd();
              }
              struct.setSeedUrlsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CRAWLER_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.crawlerNum = iprot.readI32();
              struct.setCrawlerNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HOST_URL_EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostUrlExp = iprot.readString();
              struct.setHostUrlExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NAVIGATION_URL_EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.navigationUrlExp = iprot.readString();
              struct.setNavigationUrlExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONTENT_URL_EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contentUrlExp = iprot.readString();
              struct.setContentUrlExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TITLE_CONTENT_EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.titleContentExp = iprot.readString();
              struct.setTitleContentExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CONTENT_CONTENT_EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contentContentExp = iprot.readString();
              struct.setContentContentExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TIME_CONTENT_EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.timeContentExp = iprot.readString();
              struct.setTimeContentExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // WEBID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.webid = iprot.readI32();
              struct.setWebidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCrawlerNum()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'crawlerNum' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HitWebisteCrawler struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.langugeType != null) {
        if (struct.isSetLangugeType()) {
          oprot.writeFieldBegin(LANGUGE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.langugeType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.website != null) {
        oprot.writeFieldBegin(WEBSITE_FIELD_DESC);
        oprot.writeString(struct.website);
        oprot.writeFieldEnd();
      }
      if (struct.seedUrls != null) {
        oprot.writeFieldBegin(SEED_URLS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.seedUrls.size()));
          for (String _iter187 : struct.seedUrls)
          {
            oprot.writeString(_iter187);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CRAWLER_NUM_FIELD_DESC);
      oprot.writeI32(struct.crawlerNum);
      oprot.writeFieldEnd();
      if (struct.hostUrlExp != null) {
        oprot.writeFieldBegin(HOST_URL_EXP_FIELD_DESC);
        oprot.writeString(struct.hostUrlExp);
        oprot.writeFieldEnd();
      }
      if (struct.navigationUrlExp != null) {
        oprot.writeFieldBegin(NAVIGATION_URL_EXP_FIELD_DESC);
        oprot.writeString(struct.navigationUrlExp);
        oprot.writeFieldEnd();
      }
      if (struct.contentUrlExp != null) {
        oprot.writeFieldBegin(CONTENT_URL_EXP_FIELD_DESC);
        oprot.writeString(struct.contentUrlExp);
        oprot.writeFieldEnd();
      }
      if (struct.titleContentExp != null) {
        oprot.writeFieldBegin(TITLE_CONTENT_EXP_FIELD_DESC);
        oprot.writeString(struct.titleContentExp);
        oprot.writeFieldEnd();
      }
      if (struct.contentContentExp != null) {
        oprot.writeFieldBegin(CONTENT_CONTENT_EXP_FIELD_DESC);
        oprot.writeString(struct.contentContentExp);
        oprot.writeFieldEnd();
      }
      if (struct.timeContentExp != null) {
        oprot.writeFieldBegin(TIME_CONTENT_EXP_FIELD_DESC);
        oprot.writeString(struct.timeContentExp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWebid()) {
        oprot.writeFieldBegin(WEBID_FIELD_DESC);
        oprot.writeI32(struct.webid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HitWebisteCrawlerTupleSchemeFactory implements SchemeFactory {
    public HitWebisteCrawlerTupleScheme getScheme() {
      return new HitWebisteCrawlerTupleScheme();
    }
  }

  private static class HitWebisteCrawlerTupleScheme extends TupleScheme<HitWebisteCrawler> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HitWebisteCrawler struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.website);
      {
        oprot.writeI32(struct.seedUrls.size());
        for (String _iter188 : struct.seedUrls)
        {
          oprot.writeString(_iter188);
        }
      }
      oprot.writeI32(struct.crawlerNum);
      oprot.writeString(struct.hostUrlExp);
      oprot.writeString(struct.navigationUrlExp);
      oprot.writeString(struct.contentUrlExp);
      oprot.writeString(struct.titleContentExp);
      oprot.writeString(struct.contentContentExp);
      oprot.writeString(struct.timeContentExp);
      BitSet optionals = new BitSet();
      if (struct.isSetLangugeType()) {
        optionals.set(0);
      }
      if (struct.isSetWebid()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetLangugeType()) {
        oprot.writeI32(struct.langugeType.getValue());
      }
      if (struct.isSetWebid()) {
        oprot.writeI32(struct.webid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HitWebisteCrawler struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.website = iprot.readString();
      struct.setWebsiteIsSet(true);
      {
        org.apache.thrift.protocol.TList _list189 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.seedUrls = new ArrayList<String>(_list189.size);
        for (int _i190 = 0; _i190 < _list189.size; ++_i190)
        {
          String _elem191; // required
          _elem191 = iprot.readString();
          struct.seedUrls.add(_elem191);
        }
      }
      struct.setSeedUrlsIsSet(true);
      struct.crawlerNum = iprot.readI32();
      struct.setCrawlerNumIsSet(true);
      struct.hostUrlExp = iprot.readString();
      struct.setHostUrlExpIsSet(true);
      struct.navigationUrlExp = iprot.readString();
      struct.setNavigationUrlExpIsSet(true);
      struct.contentUrlExp = iprot.readString();
      struct.setContentUrlExpIsSet(true);
      struct.titleContentExp = iprot.readString();
      struct.setTitleContentExpIsSet(true);
      struct.contentContentExp = iprot.readString();
      struct.setContentContentExpIsSet(true);
      struct.timeContentExp = iprot.readString();
      struct.setTimeContentExpIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.langugeType = OpenCommonLanguge.findByValue(iprot.readI32());
        struct.setLangugeTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.webid = iprot.readI32();
        struct.setWebidIsSet(true);
      }
    }
  }

}

