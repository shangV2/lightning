/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qing.logiclayer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SmsFriend implements org.apache.thrift.TBase<SmsFriend, SmsFriend._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SmsFriend");

  private static final org.apache.thrift.protocol.TField PHONENO_FIELD_DESC = new org.apache.thrift.protocol.TField("phoneno", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CONTACT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("contactNum", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SmsFriendStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SmsFriendTupleSchemeFactory());
  }

  public String phoneno; // required
  public String username; // required
  public int contactNum; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PHONENO((short)1, "phoneno"),
    USERNAME((short)2, "username"),
    CONTACT_NUM((short)3, "contactNum");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PHONENO
          return PHONENO;
        case 2: // USERNAME
          return USERNAME;
        case 3: // CONTACT_NUM
          return CONTACT_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CONTACTNUM_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PHONENO, new org.apache.thrift.meta_data.FieldMetaData("phoneno", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTACT_NUM, new org.apache.thrift.meta_data.FieldMetaData("contactNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SmsFriend.class, metaDataMap);
  }

  public SmsFriend() {
  }

  public SmsFriend(
    String phoneno,
    String username,
    int contactNum)
  {
    this();
    this.phoneno = phoneno;
    this.username = username;
    this.contactNum = contactNum;
    setContactNumIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SmsFriend(SmsFriend other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPhoneno()) {
      this.phoneno = other.phoneno;
    }
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    this.contactNum = other.contactNum;
  }

  public SmsFriend deepCopy() {
    return new SmsFriend(this);
  }

  @Override
  public void clear() {
    this.phoneno = null;
    this.username = null;
    setContactNumIsSet(false);
    this.contactNum = 0;
  }

  public String getPhoneno() {
    return this.phoneno;
  }

  public SmsFriend setPhoneno(String phoneno) {
    this.phoneno = phoneno;
    return this;
  }

  public void unsetPhoneno() {
    this.phoneno = null;
  }

  /** Returns true if field phoneno is set (has been assigned a value) and false otherwise */
  public boolean isSetPhoneno() {
    return this.phoneno != null;
  }

  public void setPhonenoIsSet(boolean value) {
    if (!value) {
      this.phoneno = null;
    }
  }

  public String getUsername() {
    return this.username;
  }

  public SmsFriend setUsername(String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  public int getContactNum() {
    return this.contactNum;
  }

  public SmsFriend setContactNum(int contactNum) {
    this.contactNum = contactNum;
    setContactNumIsSet(true);
    return this;
  }

  public void unsetContactNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTACTNUM_ISSET_ID);
  }

  /** Returns true if field contactNum is set (has been assigned a value) and false otherwise */
  public boolean isSetContactNum() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTACTNUM_ISSET_ID);
  }

  public void setContactNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTACTNUM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PHONENO:
      if (value == null) {
        unsetPhoneno();
      } else {
        setPhoneno((String)value);
      }
      break;

    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((String)value);
      }
      break;

    case CONTACT_NUM:
      if (value == null) {
        unsetContactNum();
      } else {
        setContactNum((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PHONENO:
      return getPhoneno();

    case USERNAME:
      return getUsername();

    case CONTACT_NUM:
      return Integer.valueOf(getContactNum());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PHONENO:
      return isSetPhoneno();
    case USERNAME:
      return isSetUsername();
    case CONTACT_NUM:
      return isSetContactNum();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SmsFriend)
      return this.equals((SmsFriend)that);
    return false;
  }

  public boolean equals(SmsFriend that) {
    if (that == null)
      return false;

    boolean this_present_phoneno = true && this.isSetPhoneno();
    boolean that_present_phoneno = true && that.isSetPhoneno();
    if (this_present_phoneno || that_present_phoneno) {
      if (!(this_present_phoneno && that_present_phoneno))
        return false;
      if (!this.phoneno.equals(that.phoneno))
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_contactNum = true;
    boolean that_present_contactNum = true;
    if (this_present_contactNum || that_present_contactNum) {
      if (!(this_present_contactNum && that_present_contactNum))
        return false;
      if (this.contactNum != that.contactNum)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SmsFriend other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SmsFriend typedOther = (SmsFriend)other;

    lastComparison = Boolean.valueOf(isSetPhoneno()).compareTo(typedOther.isSetPhoneno());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhoneno()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phoneno, typedOther.phoneno);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsername()).compareTo(typedOther.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, typedOther.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContactNum()).compareTo(typedOther.isSetContactNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContactNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contactNum, typedOther.contactNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SmsFriend(");
    boolean first = true;

    sb.append("phoneno:");
    if (this.phoneno == null) {
      sb.append("null");
    } else {
      sb.append(this.phoneno);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("username:");
    if (this.username == null) {
      sb.append("null");
    } else {
      sb.append(this.username);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contactNum:");
    sb.append(this.contactNum);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SmsFriendStandardSchemeFactory implements SchemeFactory {
    public SmsFriendStandardScheme getScheme() {
      return new SmsFriendStandardScheme();
    }
  }

  private static class SmsFriendStandardScheme extends StandardScheme<SmsFriend> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SmsFriend struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PHONENO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phoneno = iprot.readString();
              struct.setPhonenoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONTACT_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.contactNum = iprot.readI32();
              struct.setContactNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SmsFriend struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.phoneno != null) {
        oprot.writeFieldBegin(PHONENO_FIELD_DESC);
        oprot.writeString(struct.phoneno);
        oprot.writeFieldEnd();
      }
      if (struct.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(struct.username);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CONTACT_NUM_FIELD_DESC);
      oprot.writeI32(struct.contactNum);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SmsFriendTupleSchemeFactory implements SchemeFactory {
    public SmsFriendTupleScheme getScheme() {
      return new SmsFriendTupleScheme();
    }
  }

  private static class SmsFriendTupleScheme extends TupleScheme<SmsFriend> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SmsFriend struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPhoneno()) {
        optionals.set(0);
      }
      if (struct.isSetUsername()) {
        optionals.set(1);
      }
      if (struct.isSetContactNum()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetPhoneno()) {
        oprot.writeString(struct.phoneno);
      }
      if (struct.isSetUsername()) {
        oprot.writeString(struct.username);
      }
      if (struct.isSetContactNum()) {
        oprot.writeI32(struct.contactNum);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SmsFriend struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.phoneno = iprot.readString();
        struct.setPhonenoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.contactNum = iprot.readI32();
        struct.setContactNumIsSet(true);
      }
    }
  }

}

