/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qing.logiclayer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class QueryOpenWebPageContentRequest implements org.apache.thrift.TBase<QueryOpenWebPageContentRequest, QueryOpenWebPageContentRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryOpenWebPageContentRequest");

  private static final org.apache.thrift.protocol.TField LANGUGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("langugeType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PAGENO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageno", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PAGESIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pagesize", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SUMMARY_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("summaryLength", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField HIGHTLIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("hightlight", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField DIVIDE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("divideType", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryOpenWebPageContentRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryOpenWebPageContentRequestTupleSchemeFactory());
  }

  /**
   * 
   * @see OpenCommonLanguge
   */
  public OpenCommonLanguge langugeType; // required
  public String query; // required
  public int pageno; // required
  public int pagesize; // required
  public int summaryLength; // required
  /**
   * 
   * @see OpenCommonHighlight
   */
  public OpenCommonHighlight hightlight; // required
  /**
   * 
   * @see OpenCommonQueryDivideType
   */
  public OpenCommonQueryDivideType divideType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see OpenCommonLanguge
     */
    LANGUGE_TYPE((short)1, "langugeType"),
    QUERY((short)2, "query"),
    PAGENO((short)3, "pageno"),
    PAGESIZE((short)4, "pagesize"),
    SUMMARY_LENGTH((short)5, "summaryLength"),
    /**
     * 
     * @see OpenCommonHighlight
     */
    HIGHTLIGHT((short)6, "hightlight"),
    /**
     * 
     * @see OpenCommonQueryDivideType
     */
    DIVIDE_TYPE((short)7, "divideType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LANGUGE_TYPE
          return LANGUGE_TYPE;
        case 2: // QUERY
          return QUERY;
        case 3: // PAGENO
          return PAGENO;
        case 4: // PAGESIZE
          return PAGESIZE;
        case 5: // SUMMARY_LENGTH
          return SUMMARY_LENGTH;
        case 6: // HIGHTLIGHT
          return HIGHTLIGHT;
        case 7: // DIVIDE_TYPE
          return DIVIDE_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PAGENO_ISSET_ID = 0;
  private static final int __PAGESIZE_ISSET_ID = 1;
  private static final int __SUMMARYLENGTH_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LANGUGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("langugeType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OpenCommonLanguge.class)));
    tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGENO, new org.apache.thrift.meta_data.FieldMetaData("pageno", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGESIZE, new org.apache.thrift.meta_data.FieldMetaData("pagesize", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUMMARY_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("summaryLength", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HIGHTLIGHT, new org.apache.thrift.meta_data.FieldMetaData("hightlight", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OpenCommonHighlight.class)));
    tmpMap.put(_Fields.DIVIDE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("divideType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OpenCommonQueryDivideType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryOpenWebPageContentRequest.class, metaDataMap);
  }

  public QueryOpenWebPageContentRequest() {
    this.langugeType = com.qing.logiclayer.OpenCommonLanguge.OC_LAN_CHINESE_ZH_CN;

    this.pageno = 0;

    this.pagesize = 10;

    this.summaryLength = 60;

    this.hightlight = com.qing.logiclayer.OpenCommonHighlight.OC_HIGHLIGHT_ON;

    this.divideType = com.qing.logiclayer.OpenCommonQueryDivideType.OC_QUERY_DIVIDE_ON;

  }

  public QueryOpenWebPageContentRequest(
    OpenCommonLanguge langugeType,
    String query,
    int pageno,
    int pagesize,
    int summaryLength,
    OpenCommonHighlight hightlight,
    OpenCommonQueryDivideType divideType)
  {
    this();
    this.langugeType = langugeType;
    this.query = query;
    this.pageno = pageno;
    setPagenoIsSet(true);
    this.pagesize = pagesize;
    setPagesizeIsSet(true);
    this.summaryLength = summaryLength;
    setSummaryLengthIsSet(true);
    this.hightlight = hightlight;
    this.divideType = divideType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryOpenWebPageContentRequest(QueryOpenWebPageContentRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetLangugeType()) {
      this.langugeType = other.langugeType;
    }
    if (other.isSetQuery()) {
      this.query = other.query;
    }
    this.pageno = other.pageno;
    this.pagesize = other.pagesize;
    this.summaryLength = other.summaryLength;
    if (other.isSetHightlight()) {
      this.hightlight = other.hightlight;
    }
    if (other.isSetDivideType()) {
      this.divideType = other.divideType;
    }
  }

  public QueryOpenWebPageContentRequest deepCopy() {
    return new QueryOpenWebPageContentRequest(this);
  }

  @Override
  public void clear() {
    this.langugeType = com.qing.logiclayer.OpenCommonLanguge.OC_LAN_CHINESE_ZH_CN;

    this.query = null;
    this.pageno = 0;

    this.pagesize = 10;

    this.summaryLength = 60;

    this.hightlight = com.qing.logiclayer.OpenCommonHighlight.OC_HIGHLIGHT_ON;

    this.divideType = com.qing.logiclayer.OpenCommonQueryDivideType.OC_QUERY_DIVIDE_ON;

  }

  /**
   * 
   * @see OpenCommonLanguge
   */
  public OpenCommonLanguge getLangugeType() {
    return this.langugeType;
  }

  /**
   * 
   * @see OpenCommonLanguge
   */
  public QueryOpenWebPageContentRequest setLangugeType(OpenCommonLanguge langugeType) {
    this.langugeType = langugeType;
    return this;
  }

  public void unsetLangugeType() {
    this.langugeType = null;
  }

  /** Returns true if field langugeType is set (has been assigned a value) and false otherwise */
  public boolean isSetLangugeType() {
    return this.langugeType != null;
  }

  public void setLangugeTypeIsSet(boolean value) {
    if (!value) {
      this.langugeType = null;
    }
  }

  public String getQuery() {
    return this.query;
  }

  public QueryOpenWebPageContentRequest setQuery(String query) {
    this.query = query;
    return this;
  }

  public void unsetQuery() {
    this.query = null;
  }

  /** Returns true if field query is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery() {
    return this.query != null;
  }

  public void setQueryIsSet(boolean value) {
    if (!value) {
      this.query = null;
    }
  }

  public int getPageno() {
    return this.pageno;
  }

  public QueryOpenWebPageContentRequest setPageno(int pageno) {
    this.pageno = pageno;
    setPagenoIsSet(true);
    return this;
  }

  public void unsetPageno() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENO_ISSET_ID);
  }

  /** Returns true if field pageno is set (has been assigned a value) and false otherwise */
  public boolean isSetPageno() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGENO_ISSET_ID);
  }

  public void setPagenoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENO_ISSET_ID, value);
  }

  public int getPagesize() {
    return this.pagesize;
  }

  public QueryOpenWebPageContentRequest setPagesize(int pagesize) {
    this.pagesize = pagesize;
    setPagesizeIsSet(true);
    return this;
  }

  public void unsetPagesize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  /** Returns true if field pagesize is set (has been assigned a value) and false otherwise */
  public boolean isSetPagesize() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  public void setPagesizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
  }

  public int getSummaryLength() {
    return this.summaryLength;
  }

  public QueryOpenWebPageContentRequest setSummaryLength(int summaryLength) {
    this.summaryLength = summaryLength;
    setSummaryLengthIsSet(true);
    return this;
  }

  public void unsetSummaryLength() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUMMARYLENGTH_ISSET_ID);
  }

  /** Returns true if field summaryLength is set (has been assigned a value) and false otherwise */
  public boolean isSetSummaryLength() {
    return EncodingUtils.testBit(__isset_bitfield, __SUMMARYLENGTH_ISSET_ID);
  }

  public void setSummaryLengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUMMARYLENGTH_ISSET_ID, value);
  }

  /**
   * 
   * @see OpenCommonHighlight
   */
  public OpenCommonHighlight getHightlight() {
    return this.hightlight;
  }

  /**
   * 
   * @see OpenCommonHighlight
   */
  public QueryOpenWebPageContentRequest setHightlight(OpenCommonHighlight hightlight) {
    this.hightlight = hightlight;
    return this;
  }

  public void unsetHightlight() {
    this.hightlight = null;
  }

  /** Returns true if field hightlight is set (has been assigned a value) and false otherwise */
  public boolean isSetHightlight() {
    return this.hightlight != null;
  }

  public void setHightlightIsSet(boolean value) {
    if (!value) {
      this.hightlight = null;
    }
  }

  /**
   * 
   * @see OpenCommonQueryDivideType
   */
  public OpenCommonQueryDivideType getDivideType() {
    return this.divideType;
  }

  /**
   * 
   * @see OpenCommonQueryDivideType
   */
  public QueryOpenWebPageContentRequest setDivideType(OpenCommonQueryDivideType divideType) {
    this.divideType = divideType;
    return this;
  }

  public void unsetDivideType() {
    this.divideType = null;
  }

  /** Returns true if field divideType is set (has been assigned a value) and false otherwise */
  public boolean isSetDivideType() {
    return this.divideType != null;
  }

  public void setDivideTypeIsSet(boolean value) {
    if (!value) {
      this.divideType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LANGUGE_TYPE:
      if (value == null) {
        unsetLangugeType();
      } else {
        setLangugeType((OpenCommonLanguge)value);
      }
      break;

    case QUERY:
      if (value == null) {
        unsetQuery();
      } else {
        setQuery((String)value);
      }
      break;

    case PAGENO:
      if (value == null) {
        unsetPageno();
      } else {
        setPageno((Integer)value);
      }
      break;

    case PAGESIZE:
      if (value == null) {
        unsetPagesize();
      } else {
        setPagesize((Integer)value);
      }
      break;

    case SUMMARY_LENGTH:
      if (value == null) {
        unsetSummaryLength();
      } else {
        setSummaryLength((Integer)value);
      }
      break;

    case HIGHTLIGHT:
      if (value == null) {
        unsetHightlight();
      } else {
        setHightlight((OpenCommonHighlight)value);
      }
      break;

    case DIVIDE_TYPE:
      if (value == null) {
        unsetDivideType();
      } else {
        setDivideType((OpenCommonQueryDivideType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LANGUGE_TYPE:
      return getLangugeType();

    case QUERY:
      return getQuery();

    case PAGENO:
      return Integer.valueOf(getPageno());

    case PAGESIZE:
      return Integer.valueOf(getPagesize());

    case SUMMARY_LENGTH:
      return Integer.valueOf(getSummaryLength());

    case HIGHTLIGHT:
      return getHightlight();

    case DIVIDE_TYPE:
      return getDivideType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LANGUGE_TYPE:
      return isSetLangugeType();
    case QUERY:
      return isSetQuery();
    case PAGENO:
      return isSetPageno();
    case PAGESIZE:
      return isSetPagesize();
    case SUMMARY_LENGTH:
      return isSetSummaryLength();
    case HIGHTLIGHT:
      return isSetHightlight();
    case DIVIDE_TYPE:
      return isSetDivideType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryOpenWebPageContentRequest)
      return this.equals((QueryOpenWebPageContentRequest)that);
    return false;
  }

  public boolean equals(QueryOpenWebPageContentRequest that) {
    if (that == null)
      return false;

    boolean this_present_langugeType = true && this.isSetLangugeType();
    boolean that_present_langugeType = true && that.isSetLangugeType();
    if (this_present_langugeType || that_present_langugeType) {
      if (!(this_present_langugeType && that_present_langugeType))
        return false;
      if (!this.langugeType.equals(that.langugeType))
        return false;
    }

    boolean this_present_query = true && this.isSetQuery();
    boolean that_present_query = true && that.isSetQuery();
    if (this_present_query || that_present_query) {
      if (!(this_present_query && that_present_query))
        return false;
      if (!this.query.equals(that.query))
        return false;
    }

    boolean this_present_pageno = true;
    boolean that_present_pageno = true;
    if (this_present_pageno || that_present_pageno) {
      if (!(this_present_pageno && that_present_pageno))
        return false;
      if (this.pageno != that.pageno)
        return false;
    }

    boolean this_present_pagesize = true;
    boolean that_present_pagesize = true;
    if (this_present_pagesize || that_present_pagesize) {
      if (!(this_present_pagesize && that_present_pagesize))
        return false;
      if (this.pagesize != that.pagesize)
        return false;
    }

    boolean this_present_summaryLength = true;
    boolean that_present_summaryLength = true;
    if (this_present_summaryLength || that_present_summaryLength) {
      if (!(this_present_summaryLength && that_present_summaryLength))
        return false;
      if (this.summaryLength != that.summaryLength)
        return false;
    }

    boolean this_present_hightlight = true && this.isSetHightlight();
    boolean that_present_hightlight = true && that.isSetHightlight();
    if (this_present_hightlight || that_present_hightlight) {
      if (!(this_present_hightlight && that_present_hightlight))
        return false;
      if (!this.hightlight.equals(that.hightlight))
        return false;
    }

    boolean this_present_divideType = true && this.isSetDivideType();
    boolean that_present_divideType = true && that.isSetDivideType();
    if (this_present_divideType || that_present_divideType) {
      if (!(this_present_divideType && that_present_divideType))
        return false;
      if (!this.divideType.equals(that.divideType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(QueryOpenWebPageContentRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    QueryOpenWebPageContentRequest typedOther = (QueryOpenWebPageContentRequest)other;

    lastComparison = Boolean.valueOf(isSetLangugeType()).compareTo(typedOther.isSetLangugeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLangugeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.langugeType, typedOther.langugeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuery()).compareTo(typedOther.isSetQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, typedOther.query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageno()).compareTo(typedOther.isSetPageno());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageno()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageno, typedOther.pageno);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPagesize()).compareTo(typedOther.isSetPagesize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPagesize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pagesize, typedOther.pagesize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSummaryLength()).compareTo(typedOther.isSetSummaryLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSummaryLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.summaryLength, typedOther.summaryLength);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHightlight()).compareTo(typedOther.isSetHightlight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHightlight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hightlight, typedOther.hightlight);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDivideType()).compareTo(typedOther.isSetDivideType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDivideType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.divideType, typedOther.divideType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryOpenWebPageContentRequest(");
    boolean first = true;

    sb.append("langugeType:");
    if (this.langugeType == null) {
      sb.append("null");
    } else {
      sb.append(this.langugeType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("query:");
    if (this.query == null) {
      sb.append("null");
    } else {
      sb.append(this.query);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageno:");
    sb.append(this.pageno);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pagesize:");
    sb.append(this.pagesize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("summaryLength:");
    sb.append(this.summaryLength);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hightlight:");
    if (this.hightlight == null) {
      sb.append("null");
    } else {
      sb.append(this.hightlight);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("divideType:");
    if (this.divideType == null) {
      sb.append("null");
    } else {
      sb.append(this.divideType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (langugeType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'langugeType' was not present! Struct: " + toString());
    }
    if (query == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'query' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'pageno' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'pagesize' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'summaryLength' because it's a primitive and you chose the non-beans generator.
    if (hightlight == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'hightlight' was not present! Struct: " + toString());
    }
    if (divideType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'divideType' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryOpenWebPageContentRequestStandardSchemeFactory implements SchemeFactory {
    public QueryOpenWebPageContentRequestStandardScheme getScheme() {
      return new QueryOpenWebPageContentRequestStandardScheme();
    }
  }

  private static class QueryOpenWebPageContentRequestStandardScheme extends StandardScheme<QueryOpenWebPageContentRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryOpenWebPageContentRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LANGUGE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.langugeType = OpenCommonLanguge.findByValue(iprot.readI32());
              struct.setLangugeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.query = iprot.readString();
              struct.setQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAGENO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageno = iprot.readI32();
              struct.setPagenoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PAGESIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pagesize = iprot.readI32();
              struct.setPagesizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SUMMARY_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.summaryLength = iprot.readI32();
              struct.setSummaryLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HIGHTLIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hightlight = OpenCommonHighlight.findByValue(iprot.readI32());
              struct.setHightlightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DIVIDE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.divideType = OpenCommonQueryDivideType.findByValue(iprot.readI32());
              struct.setDivideTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetPageno()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'pageno' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPagesize()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'pagesize' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSummaryLength()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'summaryLength' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryOpenWebPageContentRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.langugeType != null) {
        oprot.writeFieldBegin(LANGUGE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.langugeType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.query != null) {
        oprot.writeFieldBegin(QUERY_FIELD_DESC);
        oprot.writeString(struct.query);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGENO_FIELD_DESC);
      oprot.writeI32(struct.pageno);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGESIZE_FIELD_DESC);
      oprot.writeI32(struct.pagesize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUMMARY_LENGTH_FIELD_DESC);
      oprot.writeI32(struct.summaryLength);
      oprot.writeFieldEnd();
      if (struct.hightlight != null) {
        oprot.writeFieldBegin(HIGHTLIGHT_FIELD_DESC);
        oprot.writeI32(struct.hightlight.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.divideType != null) {
        oprot.writeFieldBegin(DIVIDE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.divideType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryOpenWebPageContentRequestTupleSchemeFactory implements SchemeFactory {
    public QueryOpenWebPageContentRequestTupleScheme getScheme() {
      return new QueryOpenWebPageContentRequestTupleScheme();
    }
  }

  private static class QueryOpenWebPageContentRequestTupleScheme extends TupleScheme<QueryOpenWebPageContentRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryOpenWebPageContentRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.langugeType.getValue());
      oprot.writeString(struct.query);
      oprot.writeI32(struct.pageno);
      oprot.writeI32(struct.pagesize);
      oprot.writeI32(struct.summaryLength);
      oprot.writeI32(struct.hightlight.getValue());
      oprot.writeI32(struct.divideType.getValue());
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryOpenWebPageContentRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.langugeType = OpenCommonLanguge.findByValue(iprot.readI32());
      struct.setLangugeTypeIsSet(true);
      struct.query = iprot.readString();
      struct.setQueryIsSet(true);
      struct.pageno = iprot.readI32();
      struct.setPagenoIsSet(true);
      struct.pagesize = iprot.readI32();
      struct.setPagesizeIsSet(true);
      struct.summaryLength = iprot.readI32();
      struct.setSummaryLengthIsSet(true);
      struct.hightlight = OpenCommonHighlight.findByValue(iprot.readI32());
      struct.setHightlightIsSet(true);
      struct.divideType = OpenCommonQueryDivideType.findByValue(iprot.readI32());
      struct.setDivideTypeIsSet(true);
    }
  }

}

