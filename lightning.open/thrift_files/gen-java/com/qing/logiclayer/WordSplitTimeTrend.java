/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qing.logiclayer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class WordSplitTimeTrend implements org.apache.thrift.TBase<WordSplitTimeTrend, WordSplitTimeTrend._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WordSplitTimeTrend");

  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SMSFREQ_FIELD_DESC = new org.apache.thrift.protocol.TField("smsfreq", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PAGEFREQ_FIELD_DESC = new org.apache.thrift.protocol.TField("pagefreq", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WordSplitTimeTrendStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WordSplitTimeTrendTupleSchemeFactory());
  }

  public String date; // required
  public int smsfreq; // required
  public int pagefreq; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DATE((short)1, "date"),
    SMSFREQ((short)2, "smsfreq"),
    PAGEFREQ((short)3, "pagefreq");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DATE
          return DATE;
        case 2: // SMSFREQ
          return SMSFREQ;
        case 3: // PAGEFREQ
          return PAGEFREQ;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SMSFREQ_ISSET_ID = 0;
  private static final int __PAGEFREQ_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SMSFREQ, new org.apache.thrift.meta_data.FieldMetaData("smsfreq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGEFREQ, new org.apache.thrift.meta_data.FieldMetaData("pagefreq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WordSplitTimeTrend.class, metaDataMap);
  }

  public WordSplitTimeTrend() {
  }

  public WordSplitTimeTrend(
    String date,
    int smsfreq,
    int pagefreq)
  {
    this();
    this.date = date;
    this.smsfreq = smsfreq;
    setSmsfreqIsSet(true);
    this.pagefreq = pagefreq;
    setPagefreqIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WordSplitTimeTrend(WordSplitTimeTrend other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDate()) {
      this.date = other.date;
    }
    this.smsfreq = other.smsfreq;
    this.pagefreq = other.pagefreq;
  }

  public WordSplitTimeTrend deepCopy() {
    return new WordSplitTimeTrend(this);
  }

  @Override
  public void clear() {
    this.date = null;
    setSmsfreqIsSet(false);
    this.smsfreq = 0;
    setPagefreqIsSet(false);
    this.pagefreq = 0;
  }

  public String getDate() {
    return this.date;
  }

  public WordSplitTimeTrend setDate(String date) {
    this.date = date;
    return this;
  }

  public void unsetDate() {
    this.date = null;
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return this.date != null;
  }

  public void setDateIsSet(boolean value) {
    if (!value) {
      this.date = null;
    }
  }

  public int getSmsfreq() {
    return this.smsfreq;
  }

  public WordSplitTimeTrend setSmsfreq(int smsfreq) {
    this.smsfreq = smsfreq;
    setSmsfreqIsSet(true);
    return this;
  }

  public void unsetSmsfreq() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SMSFREQ_ISSET_ID);
  }

  /** Returns true if field smsfreq is set (has been assigned a value) and false otherwise */
  public boolean isSetSmsfreq() {
    return EncodingUtils.testBit(__isset_bitfield, __SMSFREQ_ISSET_ID);
  }

  public void setSmsfreqIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SMSFREQ_ISSET_ID, value);
  }

  public int getPagefreq() {
    return this.pagefreq;
  }

  public WordSplitTimeTrend setPagefreq(int pagefreq) {
    this.pagefreq = pagefreq;
    setPagefreqIsSet(true);
    return this;
  }

  public void unsetPagefreq() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGEFREQ_ISSET_ID);
  }

  /** Returns true if field pagefreq is set (has been assigned a value) and false otherwise */
  public boolean isSetPagefreq() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGEFREQ_ISSET_ID);
  }

  public void setPagefreqIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGEFREQ_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((String)value);
      }
      break;

    case SMSFREQ:
      if (value == null) {
        unsetSmsfreq();
      } else {
        setSmsfreq((Integer)value);
      }
      break;

    case PAGEFREQ:
      if (value == null) {
        unsetPagefreq();
      } else {
        setPagefreq((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DATE:
      return getDate();

    case SMSFREQ:
      return Integer.valueOf(getSmsfreq());

    case PAGEFREQ:
      return Integer.valueOf(getPagefreq());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DATE:
      return isSetDate();
    case SMSFREQ:
      return isSetSmsfreq();
    case PAGEFREQ:
      return isSetPagefreq();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WordSplitTimeTrend)
      return this.equals((WordSplitTimeTrend)that);
    return false;
  }

  public boolean equals(WordSplitTimeTrend that) {
    if (that == null)
      return false;

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (!this.date.equals(that.date))
        return false;
    }

    boolean this_present_smsfreq = true;
    boolean that_present_smsfreq = true;
    if (this_present_smsfreq || that_present_smsfreq) {
      if (!(this_present_smsfreq && that_present_smsfreq))
        return false;
      if (this.smsfreq != that.smsfreq)
        return false;
    }

    boolean this_present_pagefreq = true;
    boolean that_present_pagefreq = true;
    if (this_present_pagefreq || that_present_pagefreq) {
      if (!(this_present_pagefreq && that_present_pagefreq))
        return false;
      if (this.pagefreq != that.pagefreq)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(WordSplitTimeTrend other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    WordSplitTimeTrend typedOther = (WordSplitTimeTrend)other;

    lastComparison = Boolean.valueOf(isSetDate()).compareTo(typedOther.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, typedOther.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSmsfreq()).compareTo(typedOther.isSetSmsfreq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSmsfreq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smsfreq, typedOther.smsfreq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPagefreq()).compareTo(typedOther.isSetPagefreq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPagefreq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pagefreq, typedOther.pagefreq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WordSplitTimeTrend(");
    boolean first = true;

    sb.append("date:");
    if (this.date == null) {
      sb.append("null");
    } else {
      sb.append(this.date);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("smsfreq:");
    sb.append(this.smsfreq);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pagefreq:");
    sb.append(this.pagefreq);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WordSplitTimeTrendStandardSchemeFactory implements SchemeFactory {
    public WordSplitTimeTrendStandardScheme getScheme() {
      return new WordSplitTimeTrendStandardScheme();
    }
  }

  private static class WordSplitTimeTrendStandardScheme extends StandardScheme<WordSplitTimeTrend> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WordSplitTimeTrend struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date = iprot.readString();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SMSFREQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.smsfreq = iprot.readI32();
              struct.setSmsfreqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAGEFREQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pagefreq = iprot.readI32();
              struct.setPagefreqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WordSplitTimeTrend struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.date != null) {
        oprot.writeFieldBegin(DATE_FIELD_DESC);
        oprot.writeString(struct.date);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SMSFREQ_FIELD_DESC);
      oprot.writeI32(struct.smsfreq);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGEFREQ_FIELD_DESC);
      oprot.writeI32(struct.pagefreq);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WordSplitTimeTrendTupleSchemeFactory implements SchemeFactory {
    public WordSplitTimeTrendTupleScheme getScheme() {
      return new WordSplitTimeTrendTupleScheme();
    }
  }

  private static class WordSplitTimeTrendTupleScheme extends TupleScheme<WordSplitTimeTrend> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WordSplitTimeTrend struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDate()) {
        optionals.set(0);
      }
      if (struct.isSetSmsfreq()) {
        optionals.set(1);
      }
      if (struct.isSetPagefreq()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetDate()) {
        oprot.writeString(struct.date);
      }
      if (struct.isSetSmsfreq()) {
        oprot.writeI32(struct.smsfreq);
      }
      if (struct.isSetPagefreq()) {
        oprot.writeI32(struct.pagefreq);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WordSplitTimeTrend struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.date = iprot.readString();
        struct.setDateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.smsfreq = iprot.readI32();
        struct.setSmsfreqIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pagefreq = iprot.readI32();
        struct.setPagefreqIsSet(true);
      }
    }
  }

}

